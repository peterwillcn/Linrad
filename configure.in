AC_PREREQ(2.50)
AC_INIT(lmain.c)
AC_MSG_CHECKING([OS])
BITS=`(getconf LONG_BIT)`
AC_SUBST(BITS)
ANYTHING_OK="0"
SCREEN32_OK="0"
SOUND32_OK="0"
SCREEN64_OK="0"
SOUND64_OK="0"
OS=`uname`
AC_SUBST(OS, "${OS}")
MACHINE=$(uname -m)
CPU="CPU_INTEL"
if test "$MACHINE" = "armv5l"; then
  CPU="CPU_ARM"
fi
if test "$MACHINE" = "armv6l"; then
  CPU="CPU_ARM"
fi
if test "$MACHINE" = "armv7l"; then
  CPU="CPU_ARM"
fi
if test "$MACHINE" = "armv8l"; then
  echo "The architecture is armv8l which should support 64 bit code."
  echo "Please send a mail to me: <leif at sm5bsz.com>"
  echo "I will send some test packages to figure out how to"
  echo "add whatever might be needed to compile Linrad"
  exit
  CPU="CPU_ARM"
fi
AC_SUBST(CPU)
if test "$CPU" = "CPU_INTEL"; then
  ASMLIB32='fftasm.ol getiq.ol fft2mmxa.ol fft2mmxb.ol fft2mmxc.ol simdasm.ol hware.ol split.ol'
  ASMLIB64='fftasm.om getiq.om fft2mmxa.om fft2mmxb.om fft2mmxc.om simdasm.om split.om'
else
  ASMLIB32="csplit.ol"
  ASMLIB64="csplit.om"
fi
AC_SUBST(ASMLIB32)
AC_SUBST(ASMLIB64)
# *******************************************************************
if test "$BITS" = "32"; then
  TXT32=""
else
  TXT32="(32bit)"
fi
ELF32=""
ELF64=""
if test ${OS} != "Darwin"; then
  ldconfig /lib32 /lib64 /usr/lib32 /usr/lib64 /usr/lib32/lib /usr/local/lib \
  /usr/local32/lib /emul/ia32-linux/lib /emul/ia32-linux/usr/lib /usr/X11/lib \
  /usr/PCBSD/local/lib /usr/lib/i386-linux-gnu /usr/lib/x86_64-linux-gnu \
  /usr/X11R6/lib /opt/local/lib /usr/lib/arm-linux-gnueabihf \
  /usr/local/lib64
  ELF64="-felf64"
  LIBEXT="so"
  S_OS_TYPE="OS_LINUX"
  DARWIN="-DDARWIN=0"
  if test "$BITS" = "32"; then
    ELF32=-felf
  else
    ELF32=-felf32
  fi
else
  S_OS_TYPE="OS_WINDOWS"
  LIBEXT="dylib"
  DARWIN="-DDARWIN=1 -D__STDC_VERSION__=0L"
fi
AC_SUBST(S_OS_TYPE)
# Find out whether we have gcc
CC=gcc
AC_PATH_PROG(HAVE_GCC, ${CC} )
if test "$HAVE_GCC" = ""; then
  echo -------------------------------------------------------
  echo Can not find ${CC} , the GNU C compiler.
  echo Install gcc and development libraries. Then run configure again.
  echo Debian, Ubuntu: apt-get install gcc
  echo old Fedora: yum install gcc
  echo Fedora 22 and later: dnf install gcc
  echo Mandriva, Mageia: urpmi gcc
  echo SuSE: zypper install gcc
  echo Sabayon: Use Rigo application browser to install gcc
  exit
fi
${CC} $DARWIN libfind1.c -c -o libfind1.ol 2> x.x
chmod 777 x.x
Y=`cat x.x`
if test "$Y" != ""; then
  DARWIN="-DDARWIN=1"
  ${CC} $DARWIN libfind1.c -c -o libfind1.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" != ""; then
    echo -------------------------------------------------------
    echo $Y
    echo -------------------------------------------------------
    echo The gcc compiler is installed but does not work.
    echo The reason is probably missing header files.
    echo Debian, Ubuntu: apt-get install libc6-dev
    echo old Fedora: yum install gcc
    echo Fedora 22 and later: dnf install gcc
    echo SuSE: zypper install gcc
    echo -------------------------------------------------------
    exit
  fi
fi
AC_SUBST(DARWIN)
# ***********************************************************************
# Make the libfind files that we use to figure out whether libraries
# are 32 bit ELF or 64 bit ELF.
${CC} $DARWIN -o libfind1 libfind1.ol -lm 2>x.x
Y=`cat x.x`
chmod 777 x.x
if test "$Y" != ""; then
  echo -------------------------------------------------------
  echo $Y
  echo -------------------------------------------------------
  echo The gcc compiler is installed and works, but the linker does not work.
  echo a symbolic limk may help: 
  echo ln /lib/libgcc_s.${LIBEXT}.1 /lib/libgcc_s.${LIBEXT}
  echo -------------------------------------------------------
  exit
fi
${CC} libfind2.c -c -o libfind2.ol 2> x.x
chmod 777 x.x
Y=`cat x.x`
if test "$Y" != ""; then
  echo -------------------------------------------------------
  echo $Y
  echo -------------------------------------------------------
  exit
fi 
${CC} -o libfind2 libfind2.ol -lm 2>x.x
chmod 777 x.x
Y=`cat x.x`
if test "$Y" != ""; then
  echo -------------------------------------------------------
  echo $Y
  echo -------------------------------------------------------
  exit
fi 
# *******************************************************************
# Find out whether we have nasm
if test "$CPU" = "CPU_INTEL"; then
  AC_PATH_PROG(NASM, nasm)
  if test "$NASM" = ""; then
    echo -------------------------------------------------------
    echo Can not find NASM, the Netwide Assembler.
    echo Install nasm and run configure again.
    echo Debian, Ubuntu,: apt-get install nasm
    echo PClinuxOS: apt-get install nasm
    echo old Fedora: yum install nasm
    echo Fedora 22 and later: dnf install nasm
    echo SuSE: zypper install nasm
    echo Mandriva,Mageia: urpmi nasm
    echo Gentoo,Sabayon: emerge nasm
    echo You may also get it from the NASM Internet site.
    echo -------------------------------------------------------
    exit
  fi
else
  ELF32="UNUSED"
  ELF64="UNUSED"
fi
if test "$LIBEXT" = "dylib"; then
  ELF32=""
  nasm -w-orphan-labels -felf -s -D OS_WINDOWS getiq.s -o getiq.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    ELF32=-felf
  fi
  nasm -w-orphan-labels -fmacho -s -D OS_WINDOWS getiq.s -o getiq.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    ELF32=-fmacho
  fi
  nasm -w-orphan-labels -fmacho32 -s -D OS_WINDOWS getiq.s -o getiq.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    ELF32=-fmacho32
  fi
  ELF64=""
  nasm -w-orphan-labels -fmacho64 -s -D OS_WINDOWS getiq64.s -o getiq64.om 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    ELF64=-fmacho64
  fi
fi
AC_SUBST(ELF32)
AC_SUBST(ELF64)
# *******************************************************************
# Find out whether we have make
AC_PATH_PROG(MAKE, make)
if test "$MAKE" = ""; then
  echo -------------------------------------------------------
  echo Can not find make which will be needed to build Linrad.
  echo Install make and run configure again.
  echo Debian, Ubuntu: apt-get install make
  echo oldFedora: yum install make
  echo Fedora 22 and later: dnf install make
  echo Mandriva: urpmi make.
  echo SuSE: zypper install make
  echo -------------------------------------------------------
  exit
fi
AC_PATH_PROG(HAVE_WGET, wget)
AC_PATH_PROG(HAVE_PKG_CONFIG, pkg-config)
AC_PATH_PROG(HAVE_LIBTOOL, libtoolize)
AC_PATH_PROG(HAVE_AUTOMAKE, automake)
AC_PATH_PROG(HAVE_CMAKE, cmake)
AC_PATH_PROG(HAVE_GIT, git)
AC_PATH_PROG(HAVE_ALIEN, alien)
AC_PATH_PROG(HAVE_SUBVERSION, svn)
AC_PATH_PROG(HAVE_XXD, xxd)
AC_PATH_PROG(HAVE_CPP, g++)
HELP="0"
AC_ARG_WITH(help,,HELP="1")
MAKE_SERVER=0
AC_ARG_WITH(server,,MAKE_SERVER="1")
AC_SUBST(MAKE_SERVER)
LLINRAD_EXE="linrad.exe"
AC_SUBST(LLINRAD_EXE)
WLINRAD_EXE="for_Windows"
AC_SUBST(WLINRAD_EXE)
rm -f Makefile
rm -f conf.h
rm -f lconf.h
rm -f rusage.h
rm -f config.cache
SDEVPATH="unkn"
OSSN="0"
if test ${OS} = "Linux"; then
  # ************************************************************
  # Find out where 4Front OSS is installed and set path to the
  # device files for OSS and legacy sound.
  AC_CHECK_FILE( /usr/lib/oss/soundcard.h, OSSN="1")
  AC_CHECK_FILE( /usr/lib/oss/include/sys/soundcard.h, OSSN="2")
  AC_CHECK_FILE( /usr/local/lib/oss/soundcard.h, OSSN="3")
  AC_CHECK_FILE( /usr/local/lib/oss/include/sys/soundcard.h, OSSN="4")
  AC_CHECK_FILE( /lib/oss/soundcard.h, OSSN="5")
  AC_CHECK_FILE( /lib/oss/include/sys/soundcard.h, OSSN="6")
  AC_CHECK_FILE( /var/lib/oss/soundcard.h, OSSN="7")
  AC_CHECK_FILE( /var/lib/oss/include/sys/soundcard.h, OSSN="8")
  AC_CHECK_FILE( /opt/oss/soundcard.h, OSSN="9")
  AC_CHECK_FILE( /opt/oss/include/sys/soundcard.h, OSSN="10")
  AC_CHECK_FILE( /root/oss/soundcard.h, OSSN="11")
  AC_CHECK_FILE( /root/oss/include/sys/soundcard.h, OSSN="12")
  AC_SUBST(OSSN)
  AC_CHECK_FILE( /dev/dsp, SDEVPATH="/dev/dsp")
  AC_CHECK_FILE( /dev/sound/dsp, SDEVPATH="/dev/sound/dsp")
  # ********************************************************************
  # Find out where to list the init scripts to use when booting Linux
  # These will be used to install svgalib_helper, the SDR-14 driver 
  # and possibly other hardware related drivers to be added.
  INIT="/etc/rc.d"
  AC_CHECK_FILE( /etc/rc3.d/., INIT="/etc")
  AC_CHECK_FILE( /etc/init.d/rc3.d/., INIT="/etc/init.d")
  AC_CHECK_FILE( /etc/rc.d/rc3.d/., INIT="/etc/rc.d")
  AC_SUBST(INIT)
fi
# ***********************************************************************
# Find out if the user has any files of his own that we should include.
AC_CHECK_FILE( ./users_hwaredriver.c, LUSERHWDR="1")
AC_SUBST(LUSERHWDR)
AC_CHECK_FILE( ./users_hwaredriver.c, LDEPS1="users_hwaredriver.c")
AC_SUBST(LDEPS1)
AC_CHECK_FILE( ./wusers_hwaredriver.c, WUSERHWDR="1")
AC_SUBST(WUSERHWDR)
AC_CHECK_FILE( ./wusers_hwaredriver.c, WDEPS1="wusers_hwaredriver.c")
AC_SUBST(WDEPS1)
AC_CHECK_FILE( ./users_hwaredef.h, LUSERHWDEF="1")
AC_SUBST(LUSERHWDEF)
AC_CHECK_FILE( ./users_hwaredef.h, DEPS2="users_hwaredef.h")
AC_SUBST(DEPS2)
AC_CHECK_FILE( ./wusers_hwaredef.h, WUSERHWDEF="1")
AC_SUBST(WUSERHWDEF)
AC_CHECK_FILE( ./wusers_hwaredef.h, WDEPS4="wusers_hwaredef.h")
AC_SUBST(WDEPS4)
AC_CHECK_FILE( ./users_extra.c, USEREXTRA="1")
AC_SUBST(USEREXTRA)
AC_CHECK_FILE( ./users_extra.c, DEPS3="users_extra.c")
AC_SUBST(DEPS3)
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Things we need to cross compile for 32 bit Windows under Linux.
WLIN_OK="1"
MINGWPATH=" "
MINGWBIN="mingw32"
#*********************************************************************
#********************************************************************
# Check whether we have mingw32, or at least some of it. 
MINGW32_OK="0"
AC_CHECK_FILE(/usr/bin/i686-w64-mingw32-gcc,MINGW32_DEB="1" , MINGW32_DEB="0")
if test "$MINGW32_DEB" = "1"; then
  AC_CHECK_FILE(/usr/i686-w64-mingw32/include/math.h,DI="1",DI="0")
fi 
if test "$DI" = "1"; then
  MINGWBIN="/usr/bin/i686-w64-mingw32-gcc"
  MINGWPATH="/usr/i686-w64-mingw32/"
  MINGW32_OK="1"
fi
AC_CHECK_FILE(/usr/bin/i586-mingw32msvc-gcc,MINGW32_DEB="1" , MINGW32_DEB="0")
if test "$MINGW32_DEB" = "1"; then
  AC_CHECK_FILE(/usr/i586-mingw32msvc/include/math.h,DI="1",DI="0")
fi 
if test "$DI" = "1"; then
  MINGWBIN="/usr/bin/i586-mingw32msvc-gcc"
  MINGWPATH="/usr/i586-mingw32msvc/"
  MINGW32_OK="1"
fi
AC_CHECK_FILE(/usr/bin/i586-pc-mingw32-gcc,MINGW32_MDV="1" , MINGW32_MDV="0")
if test "$MINGW32_MDV" = "1"; then
  AC_CHECK_FILE(/usr/i586-pc-mingw32/sys-root/mingw/include/math.h,MI="1",MI="0")
fi 
if test "$MI" = "1"; then
  MINGWBIN="/usr/bin/i586-pc-mingw32-gcc"
  MINGWPATH="/usr/i586-pc-mingw32/sys-root/mingw/"
  MINGW32_OK="1"
fi
AC_CHECK_FILE(/usr/bin/i686-pc-mingw32-gcc,MINGW32_FD1="1" , MINGW32_FD1="0")
if test "$MINGW32_FD1" = "1"; then
  AC_CHECK_FILE(/usr/i686-pc-mingw32/sys-root/mingw/include/math.h,FI1="1",FI1="0")
fi 
if test "$FI1" = "1"; then
  MINGWBIN="/usr/bin/i686-pc-mingw32-gcc"
  MINGWPATH="/usr/i686-pc-mingw32/sys-root/mingw/"
  MINGW32_OK="1"
fi
AC_CHECK_FILE(/usr/bin/i686-w64-mingw32-gcc,MINGW32_FD2="1" , MINGW32_FD2="0")
if test "$MINGW32_FD2" = "1"; then
  AC_CHECK_FILE(/usr/i686-w64-mingw32/sys-root/mingw/include/math.h,FI2="1",FI2="0")
fi 
if test "$FI2" = "1"; then
  MINGWBIN=/usr/bin/i686-w64-mingw32-gcc;
  MINGWPATH="/usr/i686-w64-mingw32/sys-root/mingw/"
  MINGW32_OK="1"
fi
if test "$MINGW32_OK" = "0"; then
# Everything failed.
  WLIN_OK="0"
fi
#*********************************************************************
if test "$WLIN_OK" = "1"; then
  ANYTHING_OK="1"
fi
AC_SUBST(MINGWPATH)
AC_SUBST(MINGWBIN)
AC_SUBST(WLIN_OK)  
AC_SUBST(MINGW32_OK)
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# The remaining tests are for Linux and/or FreeBSD
# *************************************************************************
# Linrad is backwards compatible under Linux back to kernel 2.2.12
# This section sets defines we need to maintain compatibility.
XFLUSH_OK=1
LIBRT=""
if test ${OS} = "Linux"; then
  LIBRT=-lrt
  kerntot=`(uname -r) | cut -d- -f-1`
  kernver=`(echo $kerntot) | cut -d. -f-3`
  case `(uname -r) | cut -d. -f-2` in
  "2.2")
  RUSAGE=1
  SDR1422=sdr14
  SDR1424=no_use
  SDR1426=no_use2
  SDR1430=no_use3
  MODEXT=o
  ;;
  "2.4")
  SDR1422=no_use2
  SDR1424=sdr14
  SDR1426=no_use
  SDR1430=no_use3
  RUSAGE=1
  MODEXT=o
  OSVER=1
  ;;
  "2.6")
  RUSAGE=0
  SDR1426=sdr14
  SDR1424=no_use
  SDR1422=no_use2
  SDR1430=no_use3
  MODEXT=ko
  case `(echo $kerntot) | cut -d. -f-3` in
  "2.6.1")
  FT245PGM=ERROR
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.2")
  FT245PGM=ERROR
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.3")
  FT245PGM=ERROR
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.4")
  OSVER=2
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.5")
  OSVER=2
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.6")
  OSVER=4
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.7")
  OSVER=4
  RUSAGE=1
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.8")
  RUSAGE=0
  KERNEL_SUBDIRS=SUBDIRS
  case `(uname -r)` in
  "2.6.8-24-default")
  OSVER=4
  ;;
  *)
  OSVER=2
  ;;
  esac
  ;;
  "2.6.9")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.10")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.11")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=SUBDIRS
  ;;
  "2.6.12")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.13")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.14")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.15")
  OSVER=4
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.16")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.17")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.18")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.19")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.20")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.21")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.22")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.23")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.24")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.25")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.26")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.27")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  ;;
  "2.6.28")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  XFLUSH_OK=0
  LIBRT=""
  ;;
  "2.6.29")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  XFLUSH_OK=0
  LIBRT=""
  ;;
  "2.6.30")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  XFLUSH_OK=0
  LIBRT=""
  ;;
  "2.6.31")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  XFLUSH_OK=0
  LIBRT=""
  ;;
  "2.6.32")
  OSVER=8
  RUSAGE=0
  KERNEL_SUBDIRS=M
  XFLUSH_OK=0
  LIBRT=""
  ;;
  *)
  OSVER=9
  RUSAGE=0
  KERNEL_SUBDIRS=M
  XFLUSH_OK=0
  LIBRT=""
  ;;
  esac
  ;;
  *)
  RUSAGE=0
  LIBRT=""
  SDR1426=no_use3
  SDR1424=no_use
  SDR1422=no_use2
  SDR1430=sdr14
  ;;
  esac
  AC_SUBST(SDR1430)
  AC_SUBST(SDR1426)
  AC_SUBST(SDR1424)
  AC_SUBST(SDR1422)
  AC_SUBST(MODEXT)
  AC_SUBST(KERNEL_SUBDIRS)
  AC_CHECK_FILE( /usr/src/linux, LINDIR="linux")
  AC_CHECK_FILE( /usr/src/linux-2.4, LINDIR="linux-2.4")
  AC_SUBST(LINDIR)
  AC_SUBST(FT245PGM) 
  AC_SUBST(OSVER) 
else
  AC_CHECK_FILE( /dev/dsp, SDEVPATH="/dev/dsp")
  RUSAGE=0
  LIBRT=""
fi
AC_SUBST(XFLUSH_OK)
AC_SUBST(SDEVPATH)
AC_SUBST(RUSAGE)
if test "$RUSAGE" = "1"; then
  M32=""
else
  M32="-m32"
fi
if test  "$CPU" = "CPU_ARM" ; then
  M32=""
fi
AC_SUBST(M32)
AC_SUBST(LIBRT)
# *******************************************************************
# Symbol tables make the executable about 3 times bigger. 
# There is an option in options.h to disable them.
# That is the option -s to the gcc linker.
# The -s option is obsolete in Mac OSX and generates a warning
# message which is avoided by not setting the -s option under Darwin
if test "$DARWIN" = "-DDARWIN=0"; then
  grep SYMBOL_TABLES options.h > x.x
  X=`grep TRUE x.x | cut -dd -f-1`
  if test "$X" = "#"; then
    ST=""
  else
    ST="Wl-s "
  fi
else
  ST="-Wl,-no_pie"
fi
AC_SUBST(ST)
# ********************************************************************
# Check if we have svgalib
SVGALIB32_OK="0"
SVGALIB64_OK="0"
SVGA32_LD="libvga.${LIBEXT}"
SVGA64_LD="libvga.${LIBEXT}"
X=`./libfind1 libvga.${LIBEXT}`
SVGA32_INC=`./libfind2 [1] ["$X"]`
SVGA64_INC=`./libfind2 [2] ["$X"]`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  SVGALIB32_OK="1"
  SVGA32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  SVGALIB64_OK="1"
  SVGA64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  SVGALIB32_OK="1"
  SVGA32_LD=`./libfind2 [3] ["$X"]`
  SVGALIB64_OK="1"
  SVGA64_LD=`./libfind2 [4] ["$X"]`
fi
SVGAGL32_LD="libvgagl.${LIBEXT}"
SVGAGL64_LD="libvgagl.${LIBEXT}"
X=`./libfind1 libvgagl.${LIBEXT}`
SVGAGL32_INC=`./libfind2 [1] ["$X"]`
SVGAGL64_INC=`./libfind2 [2] ["$X"]`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  SVGAGL32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  SVGAGL64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  SVGAGL32_LD=`./libfind2 [3] ["$X"]`
  SVGAGL64_LD=`./libfind2 [4] ["$X"]`
fi
SVGALIB32_H="0"
SVGALIB64_H="0"
if test "$SVGALIB32_OK" = "1"; then
  ${CC} ${M32} verify_svgalib.c "$SVGA32_INC" "$SVGAGL32_INC" "$SVGA32_LD" \
          "$SVGAGL32_LD" -o verify_svgalib.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    SVGALIB32_H="1"
  else
    SVGALIB32_OK="0"
    SVGAGL32_LD=""
    SVGA32_LD=""
  fi
fi
if test "$SVGALIB64_OK" = "1"; then
  ${CC} -m64 verify_svgalib.c "$SVGA64_INC" "$SVGAGL64_INC" "$SVGA64_LD" \
          "$SVGAGL64_LD" -o verify_svgalib.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    SVGALIB64_H="1"
  else
    SVGALIB64_H="0"
    SVGAGL64_LD=""
    SVGA64_LD=""
  fi
fi
AC_SUBST(SVGA32_LD)
AC_SUBST(SVGA64_LD)
AC_SUBST(SVGAGL32_LD)
AC_SUBST(SVGAGL64_LD)
AC_SUBST(SVGA32_INC)
AC_SUBST(SVGA64_INC)
AC_SUBST(SVGAGL32_INC)
AC_SUBST(SVGAGL64_INC)
# *********************************************************************
# Set variables that will create verbose error messages from Makefile.
CONSOLE32_OK="$SVGALIB32_OK"
CONSOLE64_OK="$SVGALIB64_OK"
# here we can set CONSOLExx_OK to zero when something is missing.
AC_SUBST(CONSOLE32_OK)
AC_SUBST(CONSOLE64_OK)
# ********************************************************************
# Check if we have X11
X11_32_OK="0"
X11_64_OK="0"
X11_32_LD="libX11.${LIBEXT}"
X11_64_LD="libX11.${LIBEXT}"
X=`./libfind1 libX11.${LIBEXT}`
X11_32_INC=`./libfind2 [1] ["$X"]`
X11_64_INC=`./libfind2 [2] ["$X"]`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  X11_32_OK="1"
  X11_32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  X11_64_OK="1"
  X11_64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  X11_32_OK="1"
  X11_64_OK="1"
  X11_32_LD=`./libfind2 [3] ["$X"]`
  X11_64_LD=`./libfind2 [4] ["$X"]`
fi
X11_32_H="0"
X11_64_H="0"
XKBLIB_32_OK="0"
XKBLIB_64_OK="0"
if test "$X11_32_OK" = "1"; then
  ${CC} ${M32} verify_x11.c $X11_32_INC $X11_32_LD -o verify_x11.ol  2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    X11_32_H="1"
    ${CC} ${M32} verify_xkblib.c $X11_32_INC $X11_32_LD -o verify_xkblib.ol 2> x.x
    chmod 777 x.x
    Y=`cat x.x`
    if test "$Y" = ""; then
      XKBLIB_32_OK="1"
    fi
  else
    X11_32_OK="0"
    X11_32_LD=""
    echo $Y
  fi
fi
if test "$X11_64_OK" = "1"; then
  ${CC} -m64 verify_x11.c $X11_64_INC $X11_64_LD -o verify_x11.om  2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    X11_64_H="1"
    ${CC} -m64 verify_xkblib.c $X11_64_INC $X11_64_LD -o verify_xkblib.om 2> x.x
    chmod 777 x.x
    Y=`cat x.x`
    if test "$Y" = ""; then
      XKBLIB_64_OK="1"
    fi
  else
    X11_64_H="0"
    X11_64_LD=""
  fi
fi
X11_32_ALL_OK="$X11_32_H"
X11_64_ALL_OK="$X11_64_H"
if test "$X11_32_OK" = "0"; then
  X11_32_ALL_OK="0"
fi
if test "$X11_64_OK" = "0"; then
  X11_64_ALL_OK="0"
fi
AC_SUBST(SVGALIB32_OK)
AC_SUBST(SVGALIB64_OK)
AC_SUBST(X11_32_INC)
AC_SUBST(X11_64_INC)
AC_SUBST(X11_32_OK)
AC_SUBST(X11_64_OK)
AC_SUBST(X11_32_LD)
AC_SUBST(X11_64_LD)
AC_SUBST(X11_32_ALL_OK)
AC_SUBST(X11_64_ALL_OK)
AC_SUBST(XKBLIB_32_OK)
AC_SUBST(XKBLIB_64_OK)
# ********************************************************************
# Check if we can use MIT-SHM, the shared memory fast graphics for X11.
LIBXEXT32_OK="0"
LIBXEXT64_OK="0"
LIBXEXT32_LD="libXext.${LIBEXT}"
LIBXEXT64_LD="libXext.${LIBEXT}"
X=`./libfind1 libXext.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBXEXT32_OK="1"
  LIBXEXT32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBXEXT64_OK="1"
  LIBXEXT64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBXEXT32_OK="1"
  LIBXEXT32_LD=`./libfind2 [3] ["$X"]`
  LIBXEXT64_OK="1"
  LIBXEXT64_LD=`./libfind2 [4] ["$X"]`
fi
LIBXEXT32_H="0"
LIBXEXT64_H="0"
${CC} ${M32} verify_xext.c $X11_32_INC $X11_32_LD -o verify_xext.ol 2> x.x
chmod 777 x.x
Y=`cat x.x`
if test "$Y" = ""; then
  LIBXEXT32_H="1"
else
  LIBXEXT32_OK="0"
  LIBXEXT32_LD=""
fi
if test "$BITS" = "64"; then
  ${CC} -m64 verify_xext.c $X11_64_INC  $X11_64_LD -o verify_xext.ol 2> x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    LIBXEXT64_H="1"
  else
    LIBXEXT64_OK="0"
    LIBXEXT64_LD=""
  fi
fi
AC_SUBST(LIBXEXT32_LD)
AC_SUBST(LIBXEXT64_LD)
AC_SUBST(LIBXEXT32_OK)
AC_SUBST(LIBXEXT64_OK)
#********************************************************************
# Look for the Perseus libraries that we need to compile for Linux.
PERSEUS32_OK="0"
PERSEUS64_OK="0"
PERSEUS32_LD=libperseus-sdr.${LIBEXT}
PERSEUS64_LD=libperseus-sdr.${LIBEXT}
X=`./libfind1 libperseus-sdr.${LIBEXT}`
PERSEUS32_INC=`./libfind2 [1] ["$X"]`
PERSEUS64_INC=`./libfind2 [2] ["$X"]`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  PERSEUS32_OK="1"
  PERSEUS32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  PERSEUS64_OK="1"
  PERSEUS64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  PERSEUS32_OK="1"
  PERSEUS32_LD=`./libfind2 [3] ["$X"]`
  PERSEUS64_OK="1"
  PERSEUS64_LD=`./libfind2 [4] ["$X"]`
fi
#********************************************************************
# Look for the libusb-1.0 package that we need for Perseus.
LIBUSB1_32_OK="0"
LIBUSB1_64_OK="0"
LIBUSB1_32_LD="libusb-1.0.${LIBEXT}"
LIBUSB1_64_LD="libusb-1.0.${LIBEXT}"
X=`./libfind1 libusb-1.0.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBUSB1_32_OK="1"
  LIBUSB1_32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBUSB1_64_OK="1"
  LIBUSB1_64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBUSB1_32_OK="1"
  LIBUSB1_32_LD=`./libfind2 [3] ["$X"]`
  LIBUSB1_64_OK="1"
  LIBUSB1_64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(PERSEUS32_LD)
AC_SUBST(PERSEUS64_LD)
AC_SUBST(LIBUSB1_32_LD)
AC_SUBST(LIBUSB1_64_LD)
# ********************************************************************
# Look for (the old) libusb package that we need for si570 and for
# USB2LPT (usb2lpt.c) to use a parallel port on USB.
LIBUSB32_OK="0"
LIBUSB64_OK="0"
LIBUSB32_LD="libusb.${LIBEXT}"
LIBUSB64_LD="libusb.${LIBEXT}"
X=`./libfind1 libusb.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBUSB32_OK="1"
  LIBUSB32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBUSB64_OK="1"
  LIBUSB64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBUSB32_OK="1"
  LIBUSB32_LD=`./libfind2 [3] ["$X"]`
  LIBUSB64_OK="1"
  LIBUSB64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBUSB32_LD)
AC_SUBST(LIBUSB64_LD)
# ********************************************************************
# Look for the libftdi package that we need for Soft66 and Elektor
LIBFTDI32_OK="0"
LIBFTDI64_OK="0"
LIBFTDI32_LD="libftdi.${LIBEXT}"
LIBFTDI64_LD="libftdi.${LIBEXT}"
X=`./libfind1 libftdi.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBFTDI32_OK="1"
  LIBFTDI32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBFTDI64_OK="1"
  LIBFTDI64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBFTDI32_OK="1"
  LIBFTDI32_LD=`./libfind2 [3] ["$X"]`
  LIBFTDI64_OK="1"
  LIBFTDI64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBFTDI32_LD)
AC_SUBST(LIBFTDI64_LD)
# Look for the soft66 package that we need for Soft66 receiver support
SOFT66_32_OK="0"
SOFT66_64_OK="0"
X=`./libfind1 libsoft66.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  SOFT66_32_OK="1"
  SOFT66_32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  SOFT66_64_OK="1"
  SOFT66_64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  SOFT66_32_OK="1"
  SOFT66_32_LD=`./libfind2 [3] ["$X"]`
  SOFT66_64_OK="1"
  SOFT66_64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(SOFT66_32_LD)
AC_SUBST(SOFT66_64_LD)
# ********************************************************************
# Look for the librtlsdr package that we need for Realtek RTL2832 support
LIBRTLSDR32_OK="0"
LIBRTLSDR64_OK="0"
LIBRTLSDR32_LD="librtlsdr.${LIBEXT}"
LIBRTLSDR64_LD="librtlsdr.${LIBEXT}"
X=`./libfind1 librtlsdr.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBRTLSDR32_OK="1"
  LIBRTLSDR32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBRTLSDR64_OK="1"
  LIBRTLSDR64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBRTLSDR32_OK="1"
  LIBRTLSDR32_LD=`./libfind2 [3] ["$X"]`
  LIBRTLSDR64_OK="1"
  LIBRTLSDR64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBRTLSDR32_LD)
AC_SUBST(LIBRTLSDR64_LD)
# Look for libwd_dask.so that we need for PCIe-9842
LIBWD_DASK_32_OK="0"
LIBWD_DASK_64_OK="0"
LIBWD_DASK_32_LD="libwd_dask.${LIBEXT}"
LIBWD_DASK_64_LD="libwd_dask64.${LIBEXT}"
X=`./libfind1 libwd_dask.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBWD_DASK_32_OK="1"
  LIBWD_DASK_32_LD=`./libfind2 [3] ["$X"]`
fi
X=`./libfind1 libwd_dask64.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "2"; then
  LIBWD_DASK_64_OK="1"
  LIBWD_DASK_64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBWD_DASK_32_LD)
AC_SUBST(LIBWD_DASK_64_LD)
# ********************************************************************
# Look for libbladeRF.so that we need for bladeRF from Nuand.
LIBBLADERF32_OK="0"
LIBBLADERF64_OK="0"
LIBBLADERF32_LD="libbladeRF.${LIBEXT}"
LIBBLADERF64_LD="libbladeRF.${LIBEXT}"
X=`./libfind1 libbladeRF.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBBLADERF32_OK="1"
  LIBBLADERF32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBBLADERF64_OK="1"
  LIBBLADERF64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBBLADERF32_OK="1"
  LIBBLADERF32_LD=`./libfind2 [3] ["$X"]`
  LIBBLADERF64_OK="1"
  LIBBLADERF64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBBLADERF32_LD)
AC_SUBST(LIBBLADERF64_LD)
# ********************************************************************
# Look for libOpenCL.so that we need to run FFT on the GPU.
LIBOPENCL32_OK="0"
LIBOPENCL64_OK="0"
LIBOPENCL32_LD=""
LIBOPENCL64_LD=""
X=`./libfind1 libOpenCL.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBOPENCL32_OK="1"
  LIBOPENCL32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBOPENCL64_OK="1"
  LIBOPENCL64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBOPENCL32_OK="1"
  LIBOPENCL32_LD=`./libfind2 [3] ["$X"]`
  LIBOPENCL64_OK="1"
  LIBOPENCL64_LD=`./libfind2 [4] ["$X"]`
fi
AC_CHECK_FILE( build/extlibs/libclFFT.a, CLFFTPATH32="build/extlibs/libclFFT.a -lstdc++") 
AC_CHECK_FILE( extlibs/clFFT/src/include/clFFT.h, CLFFTINC="-Iextlibs/clFFT/src/include") 
CLFFTPATH64="$CLFFTPATH32"
AC_SUBST(CLFFTINC)
OCLPROGS32="-DOPENCL_PRESENT=0"
OCLPROGS64="-DOPENCL_PRESENT=0"
if test "$CLFFTPATH32" != ""; then
  if test "$CLFFTINC" != ""; then
    if test "$LIBOPENCL32_OK" = "1"; then
      OCLPROGS32="-DOPENCL_PRESENT=1"
    else
      LIBOPENCL32_LD=""
      CLFFTPATH32=""
    fi
    if test "$LIBOPENCL64_OK" = "1"; then
      OCLPROGS64="-DOPENCL_PRESENT=1"
    else
      LIBOPENCL64_LD=""
      CLFFTPATH64=""
    fi
  fi
fi
if test "$CLFFTPATH32" == ""; then
  LIBOPENCL32_LD=""
  CLFFTPATH32=""
fi
if test "$CLFFTPATH64" == ""; then
  LIBOPENCL64_LD=""
  CLFFTPATH64=""
fi
if test "$CLFFTINC" == ""; then
  LIBOPENCL32_LD=""
  CLFFTPATH32=""
  LIBOPENCL64_LD=""
 CLFFTPATH64=""
fi
AC_SUBST(CLFFTPATH32)
AC_SUBST(CLFFTPATH64)
AC_SUBST(CLFFTINC)
AC_SUBST(OCLPROGS32)
AC_SUBST(OCLPROGS64)
AC_SUBST(LIBOPENCL32_LD)
AC_SUBST(LIBOPENCL64_LD)
# ********************************************************************
# Look for libmirisdr.so this is for  www.mirics.com USB dongles.
LIBMIRISDR32_OK="0"
LIBMIRISDR64_OK="0"
LIBMIRISDR32_LD="libmirisdr.${LIBEXT}"
LIBMIRISDR64_LD="libmirisdr.${LIBEXT}"
X=`./libfind1 libmirisdr.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBMIRISDR32_OK="1"
  LIBMIRISDR32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBMIRISDR64_OK="1"
  LIBMIRISDR64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBMIRISDR32_OK="1"
  LIBMIRISDR32_LD=`./libfind2 [3] ["$X"]`
  LIBMIRISDR64_OK="1"
  LIBMIRISDR64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBMIRISDR32_LD)
AC_SUBST(LIBMIRISDR64_LD)

# ********************************************************************
# Look for libairspy.so this is for  www.mirics.com USB dongles.
LIBAIRSPY32_OK="0"
LIBAIRSPY64_OK="0"
LIBAIRSPY32_LD="libairspy.${LIBEXT}"
LIBAIRSPY64_LD="libairspy.${LIBEXT}"
X=`./libfind1 libairspy.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBAIRSPY32_OK="1"
  LIBAIRSPY32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBAIRSPY64_OK="1"
  LIBAIRSPY64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBAIRSPY32_OK="1"
  LIBAIRSPY32_LD=`./libfind2 [3] ["$X"]`
  LIBAIRSPY64_OK="1"
  LIBAIRSPY64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBAIRSPY32_LD)
AC_SUBST(LIBAIRSPY64_LD)
# ********************************************************************
# Look for libfdms1_hw_ctrl.so.1.0 this is for  ELAD FDM-S1.
LIBFDMS1_32_OK="0"
LIBFDMS1_64_OK="0"
LIBFDMS1_32_LD="libfdms1_hw_ctrl.${LIBEXT}.1.0"
LIBFDMS1_64_LD="libfdms1_hw_ctrl.${LIBEXT}.1.0"
X=`./libfind1 libfdms1_hw_ctrl.${LIBEXT}.1.0`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBFDMS1_32_OK="1"
  LIBFDMS1_32_LD=`./libfind2 [3] ["$X"]`.1.0
fi
if test "$Y" = "2"; then
  LIBFDMS1_64_OK="1"
  LIBFDMS1_64_LD=`./libfind2 [4] ["$X"]`.1.0
fi
if test "$Y" = "3"; then
  LIBFDMS1_32_OK="1"
  LIBFDMS1_32_LD=`./libfind2 [3] ["$X"]`.1.0
  LIBFDMS1_64_OK="1"
  LIBFDMS1_64_LD=`./libfind2 [4] ["$X"]`.1.0
fi
AC_SUBST(LIBFDMS1_32_LD)
AC_SUBST(LIBFDMS1_64_LD)
# ********************************************************************
# Look for the libudev package that we need for Funcube Dongle ProPlus 
# and Afedri USB support
LIBUDEV_32_OK="0"
LIBUDEV_64_OK="0"
LIBUDEV_32_LD="libudev.${LIBEXT}"
LIBUDEV_64_LD="libudev.${LIBEXT}"
X=`./libfind1 libudev.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  LIBUDEV_32_OK="1"
  LIBUDEV_32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  LIBUDEV_64_OK="1"
  LIBUDEV_64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  LIBUDEV_32_OK="1"
  LIBUDEV_32_LD=`./libfind2 [3] ["$X"]`
  LIBUDEV_64_OK="1"
  LIBUDEV_64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(LIBUDEV_32_LD)
AC_SUBST(LIBUDEV_64_LD)
# ********************************************************************
# Check whether we have ALSA and if it is modern enough.
ALSA32_OK="0"
ALSA64_OK="0"
ALSA32_LD="libasound.${LIBEXT}"
ALSA64_LD="libasound.${LIBEXT}"
X=`./libfind1 libasound.${LIBEXT}`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  ALSA32_OK="1"
  ALSA32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  ALSA64_OK="1"
  ALSA64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  ALSA32_OK="1"
  ALSA32_LD=`./libfind2 [3] ["$X"]`
  ALSA64_OK="1"
  ALSA64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(ALSA32_LD)
AC_SUBST(ALSA64_LD)
OSS32_H="1"
OSS64_H="0"
if test "$OSSN" = "0"; then
  ${CC} ${M32} verify_oss.c -c -o verify_oss.ol 2>x.x
  chmod 777 x.x  
  Y=`cat x.x`
  if test "$Y" != ""; then
    OSS32_H="0"
  fi
fi
if test "$BITS" = "64"; then
  OSS64_H="1"
  if test "$OSSN" = "0"; then
    ${CC} -m64 verify_oss.c -c -o verify_oss.ol 2>x.x
    chmod 777 x.x
    Y=`cat x.x`
    if test "$Y" != ""; then
      OSS64_H="0"
    fi
  fi
fi
AC_SUBST(OSS32_H)
AC_SUBST(OSS64_H)
# *******************************************************************
# Look for Portaudio
PORTAUDIO32_OK="0"
PORTAUDIO64_OK="0"
PORTAUDIO32_LD="libportaudio.${LIBEXT}"
PORTAUDIO64_LD="libportaudio.${LIBEXT}"
X=`./libfind1 libportaudio.${LIBEXT}`
PORTAUDIO32_INC=`./libfind2 [1] ["$X"]`
PORTAUDIO64_INC=`./libfind2 [2] ["$X"]`
Y=`./libfind2 [0] ["$X"]`
if test "$Y" = "1"; then
  PORTAUDIO32_OK="1"
  PORTAUDIO32_LD=`./libfind2 [3] ["$X"]`
fi
if test "$Y" = "2"; then
  PORTAUDIO64_OK="1"
  PORTAUDIO64_LD=`./libfind2 [4] ["$X"]`
fi
if test "$Y" = "3"; then
  PORTAUDIO32_OK="1"
  PORTAUDIO32_LD=`./libfind2 [3] ["$X"]`
  PORTAUDIO64_OK="1"
  PORTAUDIO64_LD=`./libfind2 [4] ["$X"]`
fi
AC_SUBST(PORTAUDIO32_OK)
AC_SUBST(PORTAUDIO32_LD)
AC_SUBST(PORTAUDIO64_OK)
AC_SUBST(PORTAUDIO64_LD)
# *********************************************************************
AC_OUTPUT(Makefile conf.h lconf.h rusage.h ft245.c)
SHOW_MISSING="0"
if test "$SVGALIB32_OK" = "0"; then
  SHOW_MISSING="1"
else
  ANYTHING_OK="1"
  SCREEN32_OK="1"
fi
if test "$X11_32_ALL_OK" = "0"; then
  SHOW_MISSING="1"
else
  ANYTHING_OK="1"
  SCREEN32_OK="1"
fi
if test "$LIBXEXT32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$PERSEUS32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBUSB32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$SOFT66_32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBRTLSDR32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBBLADERF32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$BITS" != "64"; then
  if test "$LIBOPENCL32_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$CLFFTPATH32" == ""; then
    SHOW_MISSING="1"
  fi
fi
if test "$LIBMIRISDR32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBAIRSPY32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBFDMS1_32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBWD_DASK_32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$LIBUDEV_32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$ALSA32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$PORTAUDIO32_OK" = "0"; then
  SHOW_MISSING="1"
fi
if test "$BITS" = "64"; then
  if test "$SVGALIB64_OK" = "0"; then
    SHOW_MISSING="1"
  else
    ANYTHING_OK="1"
    SCREEN64_OK="1"
  fi
  if test "$X11_64_ALL_OK" = "0"; then
    SHOW_MISSING="1"
  else
    ANYTHING_OK="1"
    SCREEN64_OK="1"
  fi
  if test "$LIBXEXT64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$PERSEUS64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBUSB64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$SOFT66_64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBRTLSDR64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBBLADERF64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBOPENCL64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBMIRISDR64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$CLFFTPATH64" == ""; then
    SHOW_MISSING="1"
  fi
  if test "$LIBAIRSPY64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBFDMS1_64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBWD_DASK_64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$LIBUDEV_64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$ALSA64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
  if test "$PORTAUDIO64_OK" = "0"; then
    SHOW_MISSING="1"
  fi
fi
  echo " "
if test "$ST" = "-s"; then
  echo "Symbol tables disabled. See options.h how to enable."
else
  echo "Symbol tables enabled. See options.h how to disable."
fi
install_automake(){
echo First install automake like this:
echo old Fedora: yum install automake
echo Fedora 22 and later: dnf install automake
echo Debian, Ubuntu: apt-get install automake
echo PCLinuxOS: apt-get install automake
echo SuSE: zypper install automake
echo "Mageia: urpmi automake"
echo Then run ./configure --with-help again.
}
install_cpp(){
echo "First install the C++ compiler"
echo "Debian, Ubuntu: apt-get install g++"
echo "SuSE: zypper install gcc-c++"
echo "old Fedora: yum install gcc-c++"
echo "Fedora 22 and later: dnf install gcc-c++"
echo "Then run ./configure --with-help again."
}
install_soft66(){
echo "   cd /usr/src"
echo "   rm -f soft66-0.1.3-test.tbz"
echo "   wget http://www.sm5bsz.com/linuxdsp/archive/mingw/soft66-0.1.3-test-bsz.tbz"
echo "   tar xvfj soft66-0.1.3-test-bsz.tbz"
echo "   cd soft66-0.1.3-test"
echo "   ./configure"
echo "   make"
echo "   make install"
echo "Then run ./configure --with-help again."
}
install_alien(){
echo "You have to install alien first"
echo "Debian, Ubuntu: apt-get install alien"
echo "old Fedora: yum install alien"
echo "Fedora 22 and later: dnf install alien"
echo "Mageia: urpmi alien"
echo "SuSE: install from source"
echo "PCLinuxOS: apt-get install alien"
echo "You may also install from source code like this:"
echo "Note that you wget must be installed."
echo "   cd /usr/src"
echo "   wget http://http.debian.net/debian/pool/main/a/alien/alien_8.93.tar.gz"
echo "   tar xvfz alien_8.93.tar.gz"
echo "   cd alien"
echo "Read the INSTALL file and do the installation as it suggests."
echo "Then run ./configure --with-help again."
}
install_xxd(){
echo First install xxd.
echo This package is included in mainstream Linux distributions.
echo Search the Internet for help on how to install xxd or
echo install from source https://aur.archlinux.org/packages/xxd/
echo Debian, Ubuntu: apt-get install bsdmainutils
echo old Fedora: yum install vim-common
echo Fedora 22 and later: dnf install vim-common
echo Then run ./configure --with-help again.
}
install_libtool() {
echo First install libtool like this:
echo old Fedora: yum install libtool
echo Fedora 22 and later: dnf install libtool
echo Debian, Ubuntu: apt-get install libtool
echo PCLinuxOS: apt-get install libtool
echo SuSE: zypper install libtool
echo Mageia: urpmi libtool
echo Then run ./configure --with-help again.
}
install_git(){
echo "You have to install git first"
echo "Debian, Ubuntu: apt-get install git-core"
echo "old Fedora: yum install git"
echo "Fedora 22 and later: dnf install git"
echo "Mageia: urpmi git"
echo "SuSE: zypper install git"
echo "PCLinuxOS: apt-get install git"
echo "Then run ./configure --with-help again."
}
install_subversion(){
echo "First install subversion like this:"
echo "Debian, Ubuntu: apt-get install subversion"
echo old Fedora: yum install subversion
echo Fedora 22 and later: dnf install subversion
echo "Then run ./configure --with-help again."
}
install_wget(){
echo First install wget like this:
echo old Fedora: yum install wget
echo Fedora 22 and later: dnf install wget
echo Debian, Ubuntu: apt-get install wget
echo PCLinuxOS: apt-get install wget
echo SuSE: zypper install wget
echo Then run ./configure --with-help again.
}
install_cmake(){
echo "You have to install cmake first."
echo "Debian, Ubuntu: apt-get install cmake"
echo "old Fedora: yum install cmake"
echo "Fedora 22 and later: dnf install cmake"
echo "Mageia: urpmi cmake"
echo "PCLinuxOS: apt-get install cmake"
echo "SuSE: zypper install cmake"
echo "Gentoo, Sabayon: emerge cmake"
echo "Then run ./configure --with-help again."
}
if test "$SHOW_MISSING" = "1"; then
  echo " "
  echo " |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||"
  echo "Missing or not working libraries (non fatal.)"
  if test "$HELP" = "0"; then
    echo "For information, type   ./configure --with-help"
  fi
  echo " "
fi
SHOW32="1"
if test "$BITS" = "64"; then
  ${CC} -m32 libfind1.c -o libfind1 -lm 2>x.x
  chmod 777 x.x
  Y=`cat x.x`
  if test "$Y" = ""; then
    if test "$HELP" = "1"; then
      echo 32 bit libraries for ${CC} available.
    fi
  else
    SHOW32="0"
    echo "The 32 bit libraries for ${CC} are not in place"
    if test "$HELP" = "1"; then
      echo "Debian, Ubuntu: apt-get install libc6-dev-i386"
      echo "Old Debian, Ubuntu: apt-get install ia32-libs-dev"
      echo "New Debian,Ubunty: apt-get install lib32bz2-dev"
      echo "older Fedora: yum install glibc-devel.i586"
      echo "old Fedora: yum groupinstall 'Legacy Software Development' "
      echo "old Fedora: yum install glibc-devel.i686"
      echo "Fedora 22 and later: dnf install glibc-devel.i686 libstdc++-devel.i686"
      echo "SuSE: zypper install gcc-32bit"
    fi
  fi
  echo " "
fi
if test "$SHOW32" = "1"; then
# 32 bit ------------------------- Portaudio -----------------------
  if test "$PORTAUDIO32_OK" = "0"; then
    echo "Not present: libportaudio.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "Portaudio may have to be installed from source code."
      if test ${OS} != "Darwin"; then
        echo "The purpose of installing Portaudio is to be able to use Jack."
      fi
      echo "The versions included in the distributions may not support Jack"
      echo "Make sure to remove any old non-working version first."
      if test "$BITS" = "32"; then
        echo "Install Portaudio from source like this:"
        if test "$HAVE_WGET" = ""; then
          install_wget
        else  
          echo "(Note that you may have to change the date 20140130 to something else.)"
          echo "   cd /usr/src"
          echo "   rm -f pa_stable_v19_20140130.tgz"
          echo "   wget http://portaudio.com/archives/pa_stable_v19_20140130.tgz"
          echo "   tar xvfz pa_stable_v19_20140130.tgz"
          echo "   cd portaudio"
          echo "   ./configure" 
          echo "   make"
          echo "   make install"
          echo "Then run ./configure --with-help again."
          echo " "
        fi
        echo "To install the distribution version use one of these commands"
        echo "old Fedora: yum install portaudio-devel"
        echo "Fedora 22 and later: dnf install portaudio-devel"
        echo "Debian, Ubuntu: apt-get install libportaudio-dev"
        echo "Debian 8: ln -s /usr/lib/i386-linux-gnu/libportaudio.so.2.0.0 /usr/lib/i386-linux-gnu/libportaudio.so" 
        echo "PCLinuxOS: apt-get install libportaudio2-devel"
        echo "SuSE: zypper install portaudio-devel"
        echo "Mageia: urpmi libportaudio-devel"
      else
        echo "Copy from a 32 bit installation with Jack support"
        echo "To install the distribution version use one of these commands:"
        echo "SuSE zypper install portaudio-devel"
        echo "SuSE zypper install portaudio-32bit"
        echo "Mandriva: urpmi libportaudio2"
        echo "Mageia: urpmi libportaudio2 libportaudio0 libportaudio0-devel"     
        echo "old Fedora: yum install portaudio-devel.i586, portaudio-devel"
        echo "Fedora: yum install portaudio-devel.i686"
        echo "Fedora 22: dnf install portaudio.i686 portaudio-devel.i686"
        echo "A symbolic link may be needed:"
        echo "ln -s ..../lib/libportaudio.${LIBEXT}.2 libportaudio.${LIBEXT}"
      fi
      echo "Then run ./configure --with-help again."
      echo " "
    fi
  fi
# 32 bit ------------------ Soft66 ------------------------------------
  if test "$SOFT66_32_OK" = "0"; then
    echo "Not present: libsoft66.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is needed for the Soft66 series receivers."
      if test "$LIBFTDI32_OK" = "0"; then
        echo "Install libftdi before libsoft66"
      else
        if test "$BITS" = "32"; then
          echo "Install from source code (http://www.infowares.com/soft66)"
          echo "Here are the instructions (run as root or with sudo)"
          if test "$HAVE_WGET" = ""; then
            install_wget
          else 
            if test "$HAVE_PKG_CONFIG" = ""; then
              echo First install pkg-config like this:
              echo Fedora: yum install pkg-config
              echo Debian, Ubuntu: apt-get install pkg-config
              echo PCLinuxOS: apt-get install pkg-config
              echo SuSE: zypper install pkg-config
              echo Then run ./configure --with-help again.
            else 
              install_soft66
            fi
          fi
        else
          echo "Copy from a 32 bit Linux installation"
          echo "Then run ./configure --with-help again."
        fi
      fi
      echo " "
    fi
  fi
# 32 bit ------------------ Libftdi ------------------------------------
  if test "$LIBFTDI32_OK" = "0"; then
    echo "Not present: libftdi.so (32 bit) (needed for Soft66 and Elektor)"
    if test "$HELP" = "1"; then
      if test "$BITS" = "32"; then
        echo "Debian, Ubuntu: apt-get install libftdi-dev"
        echo "Mandriva, Mageia: urpmi libftdi-devel (ftdi.h may be misplaced)"
        echo "----------------: cp /usr/include/libftdi/ftdi.h /usr/include"
        echo "PCLinuxOS: apt-get install libftdi-devel"
        echo "old Fedora: yum install libftdi-devel"
        echo "Fedora 22 and later: problematic. Install from source?"
        echo "SuSE: zypper install libftdi1-devel"
        echo "Then run ./configure --with-help again."
        echo " "
        echo "Can be installed from source instead."
        if test "$HAVE_WGET" = ""; then
          install_wget
        else
          echo "   cd /usr/src"
          echo "   rm -f libftdi-0.18.tar.gz"
          echo "   wget http://www.sm5bsz.com/linuxdsp/archive/libftdi-0.18.tar.gz"
          echo "   tar xvfz libftdi-0.18.tar.gz"
          echo "   cd libftdi-0.18"
          echo "   ./configure"
          echo "   make"
          echo "   make install"
          echo "Then run ./configure --with-help again."
        fi
      else
        echo "Fedora: yum install libftdi-devel.i686"
        echo "Or copy from a 32 bit Linux installation"
        echo "Then run ./configure --with-help again."
      fi  
      echo " "
    fi
  fi
# 32 bit ----------------- RTL 2832 Dongles --------------------------
  if test "$LIBRTLSDR32_OK" = "0"; then
    echo "Not present: librtlsdr.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is needed for the Realtek RTL2832 based DVB dongle"      
      if test "$BITS" = "32"; then
        if test "$LIBUSB1_32_OK" = "0"; then
          echo "Install libusb-1.0 before librtlsdr."    
        else
          echo "Modern Linux distributions may have a librtlsdr-dev(el) package"
          echo "You may install the standard osmocom package from source"
          echo "http://sdr.osmocom.org/trac/wiki/rtl-sdr"
          echo "To get the improved library for Linrad use the following commands:"
          if test "$HAVE_WGET" = ""; then
            install_wget
          else
            if test "$HAVE_CMAKE" = ""; then
              install_cmake
            else
              echo "   cd /usr/src"
              echo "   rm -r -f librtlsdr"
              echo "   wget http://sm5bsz.com/linuxdsp/hware/rtlsdr/rtl-sdr-linrad5.tbz"
              echo "   tar xvfj rtl-sdr-linrad5.tbz"
              echo "   cd librtlsdr"
              echo "   mkdir build"
              echo "   cd build"
              echo "   cmake .."
              echo "   make"
              echo "   make install"
              echo "Then run ./configure --with-help again."
            fi
          fi
        fi 
      else
        echo "Copy from a 32 bit installation."
        echo "Then run ./configure --with-help again."
      fi
      echo " "
    fi
  fi
# 32 bit ----------------- bladeRF --------------------------
  if test "$LIBBLADERF32_OK" = "0"; then
    echo "Not present: libbladeRF.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is needed for the nuand.com bladeRF"      
      if test "$BITS" = "32"; then
        if test "$HAVE_CPP" = ""; then
          install_cpp
        else
          if test "$HAVE_CMAKE" = ""; then
            install_cmake
          else
            if test "$HAVE_GIT" = ""; then
              install_git
            else
              if test "$LIBUSB1_32_OK" = "0"; then
                echo "Install libusb-1.0 before libbladeRF."
              else
                if test "$HAVE_PKG_CONFIG" = ""; then
                  echo First install pkg-config like this:
                  echo Fedora: yum install pkg-config
                  echo Debian, Ubuntu: apt-get install pkg-config
                  echo PCLinuxOS: apt-get install pkg-config
                  echo SuSE: zypper install pkg-config
                  echo "Then run ./configure --with-help again."
                else
                  echo "Dependencies are described here:"
                  echo "https://github.com/Nuand/bladeRF/wiki"
                  echo "Install the library like this:"
                  echo "   cd /usr/src/"
                  echo "   git clone https://github.com/Nuand/bladeRF.git"
                  echo "   cd bladeRF/host"
                  echo "   mkdir build"
                  echo "   cd build"
                  echo "   cmake -DINSTALL_UDEV_RULES=ON ../"
                  echo "   make"
                  echo "   make install"
                  echo "Then run ./configure --with-help again."
                fi
              fi
            fi
          fi
        fi
      else
        echo "Copy from a 32 bit installation."
        echo "Then run ./configure --with-help again."
      fi
    echo " "
    fi
  fi
# 32 bit ----------------- OpenCL and clFFT --------------------------
  if test "$BITS" = "32"; then
    if test "$LIBOPENCL32_OK" = "0"; then
      echo "Not present: libOpenCL.${LIBEXT} $TXT32"
      if test "$HELP" = "1"; then
        echo "This package is needed to use the graphics card for fast FFT"      
        echo "Debian, Ubuntu: apt-get install amd-opencl-dev"
        echo "Fedora 22 and later: dnf install opencl-utils-devel"
        echo "---- Note that non-free has to be specified in /etc/apt/sources.list"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    else
      if test "$CLFFTINC" == ""; then
        echo "Not present: clFFT.h"
        if test "$HELP" = "1"; then
          echo "This file is needed for fast FFT on the graphics card."
          echo "You need the files in the subdirectory extlibs of Linrad."
          echo "If you do not want the latest from the repo, Install like this:"
          echo "  svn checkout https://svn.code.sf.net/p/linrad/code/trunk linrad-latest"
          echo "  mkdir extlibs"
          echo "  cp -r linrad-latest/extlibs/* extlibs"
          echo "Then run ./configure --with-help again."
          echo " "
        fi
      fi
    fi 
    if test "$CLFFTPATH32" == ""; then
      echo "Not present: clFFT.a"
      if test "$HELP" = "1"; then
        echo "This file is needed for fast FFT on the graphics card."
        if test "$HAVE_CPP" = ""; then
          install_cpp
        else
          if test "$HAVE_CMAKE" = ""; then
            install_cmake
          else
            echo "Install like this:"
            echo "if bits/c++config.h is missing install gcc-multilib"
            echo "and add symbolic links as required."
            echo "  cd extlibs/clFFT/src"
            echo "  mkdir build"
            echo "  cd build"
            echo "  cmake .."
            echo "  make clFFT"
            echo "  cd ../../../.."     
            echo "Then run ./configure --with-help again."
            echo " "
          fi
        fi
      fi
    fi
  fi
# 32 bit ----------------- Mirics USB dongles --------------------------
  if test "$LIBMIRISDR32_OK" = "0"; then
    echo "Not present: libmirisdr.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is needed for the Mirics USB dongles"      
      if test "$BITS" = "32"; then
        if test "$HAVE_CMAKE" = ""; then
          install_cmake
        else
          if test "$HAVE_WGET" = ""; then
            install_wget
          else
            echo "Install the library like this:"
            echo "   cd /usr/src/"
            echo "   wget http://sm5bsz.com/linuxdsp/archive/mingw/libmirisdr-2-bsz.tbz"
            echo "   tar xvfj libmirisdr-2-bsz.tbz"
            echo "   cd libmirisdr-2-bsz"
            echo "   mkdir build"
            echo "   cd build"
            echo "   cmake .."
            echo "   make"
            echo "   make install"
            echo "Then run ./configure --with-help again."
          fi
        fi
      else
        echo "Copy from a 32 bit installation."
        echo "Then run ./configure --with-help again."
      fi
      echo " "
    fi
  fi
# 32 bit ----------------- Airspy --------------------------
  if test "$LIBAIRSPY32_OK" = "0"; then
    echo "Not present: libairspy.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is needed for Airspy."      
      if test "$BITS" = "32"; then
        if test "$HAVE_CPP" = ""; then
          install_cpp
        else
          if test "$HAVE_CMAKE" = ""; then
            install_cmake
          else
            if test "$HAVE_SUBVERSION" = ""; then
              install_subversion
            else
              echo "Install the library like this:"
              echo "   cd /usr/src/"
              echo "   svn checkout https://github.com/airspy/host libairspy"
              echo "   cd libairspy/trunk"
              echo "   mkdir build"
              echo "   cd build"
              echo "   cmake ../ -DINSTALL_UDEV_RULES=ON"
              echo "   make"
              echo "   make install"
              echo "Then run ./configure --with-help again."
            fi
          fi
        fi
      else
        echo "Copy from a 32 bit installation."
        echo "Then run ./configure --with-help again."
      fi
      echo " "
    fi
  fi
# 32 bit ----------------- ELAD FDM-S1 --------------------------
  if test "$LIBFDMS1_32_OK" = "0"; then
    echo "Not present: libfdms1.${LIBEXT}.1.0 $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is needed for the ELAD FDM-S1 receiver"      
      if test "$HAVE_WGET" = ""; then
        install_wget
      else  
        if test "$HAVE_ALIEN" = ""; then
          install_alien
        else
          echo "Install the libfdms1 library like this:"
          echo "(copy and paste into the command line)"
          echo "  cd /usr/src"
          echo "  mkdir libfdms1"
          echo "  cd libfdms1"
          echo "  wget http://sdr.eladit.com/FDM-S1%20Sampler/Linux/old/libfdms1_1.0-1_i386.deb ."
          echo "  alien --scripts --to-tgz libfdms1_1.0-1_i386.deb"
          echo "  tar xvfz libfdms1-1.0.tgz"
          if test "$BITS" = "32"; then
            echo "  cp usr/local/lib/* /usr/local/lib"
          else
            echo "  cp usr/local/lib/* /usr/lib32"
            echo "or copy to some other suitable location."
          fi
          echo "Then run ./configure --with-help again."
        fi
      fi
      echo " "
    fi
  fi
# 32 bit ------------------ Libudev ------------------------------------
  if test "$LIBUDEV_32_OK" = "0"; then
      echo "Not present: libudev.${LIBEXT} $TXT32 (Funcube ProPlus, Afedri USB)"
    if test "$HELP" = "1"; then
      if test "$BITS" = "32"; then
        echo "Debian, Ubuntu: apt-get install libudev-dev"
        echo "Mandriva: urpmi libudev-devel (udev.h misplaced)"
        echo "Mageia: urpmi libudev-devel"
        echo "PCLinuxOS: apt-get install libudev-devel"
        echo "old Fedora: yum install libudev-devel"
        echo "Fedora 22 and later: dnf install systemd-devel"
        echo "SuSE: zypper install libudev-devel"
        echo "Then run ./configure --with-help again."
        echo "Udev is believed to be part of most Linux distributions"
      else
        echo "Fedora: yum install systemd-devel.i686"
        echo "Fedora: ln -s /usr/lib/libudev.so.1.2.1 /usr/lib/libudev.so"
        echo "Fedora 22: dnf install systemd.i686 systemd-compat-libs.i686"
        echo "SuSE: zypper install libudev0-32bit"
        echo "SuSE: ln -s /lib/libudev.so.0.10.0 /lib/libudev.so"
        echo "Mageia: urpmi libudev-devel-208-10.mga4.i586 (change version)"
        echo "PCLinuxOS: apt-get install libudev0-devel.32bit"
        echo "Then run ./configure --with-help again."
      fi  
      echo " "
    fi
  fi
# 32 bit ------------------ Libwd_dask ------------------------------------
  if test "$LIBWD_DASK_32_OK" = "0"; then
    echo "Not present: libwd_dask.${LIBEXT} $TXT32 Neded for PCIe-9842"
    if test "$HELP" = "1"; then
      echo "Get it from the ADLINK Internet site"
      echo "www.adlinktech.com"
      echo "Register with your email account. Go to:"
      echo "Products > PXI & Modular Instruments >"
      echo "Digitizers/Oscilloscopes > Drivers"
      echo "Unpack the wd-dask .tgz archive and copy the libwd_dask.${LIBEXT}"
      echo "file to a suitable location. "
      echo "Then run ./configure --with-help again."
      echo " "
    fi
  fi
# 32 bit -------------------- Perseus  -------------------------------
  if test "$PERSEUS32_OK" = "0"; then
    echo "Not present: libperseus-sdr.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "Only for the Perseus HF receiver. Install from source!"
      if test "$BITS" = "32"; then
        if test "$LIBUSB1_32_OK" = "0"; then
          echo "Install libusb-1.0 before libperseus-sdr."
        else
          echo "Here are the instructions (run as root or with sudo)"
          if test "$HAVE_GIT" = ""; then
            install_git
          else
            if test "$HAVE_AUTOMAKE" = ""; then
              install_automake
            else
              if test "$HAVE_LIBTOOL" = ""; then
                install_libtool
              else
                if test "$HAVE_XXD" = ""; then
                  install_xxd
                else 
                  echo "   cd /usr/src"
                  echo "   rm -r libperseus-sdr"
                  echo "   git clone https://github.com/amontefusco/libperseus-sdr"
                  echo "   cd libperseus-sdr"
                  echo "   libtoolize"
                  echo "   autoconf"
                  echo "   autoreconf -i"
                  echo "   ./configure"
                  echo "   make"
                  echo "   make install"
                  echo "Then run ./configure --with-help again."
                  echo "Note that you need root privileges."
                fi
              fi
            fi
          fi
        fi
      else
        echo "Copy 32 bit libraries from a 32 bit Linux system"
        echo "Then run ./configure --with-help again."
      fi
      echo " "
    fi
  fi
# 32 bit ---------------- libusb-1.0 ------------------------
  if test "$LIBUSB1_32_OK" = "0"; then
    echo "Not present: libusb-1.0.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "Needed for most USB hardware."
      if test "$BITS" = "32"; then
        echo "Debian, Ubuntu: apt-get install libusb-1.0-0-dev"
        echo "SuSE: zypper install libusb-1_0-devel"
        echo "Mageia: urpmi libusb1.0-devel"
        echo "very old Fedora: yum install libusb1-devel"
        echo "old Fedora: yum install libusbx-devel"
        echo  Fedora 22 and later: dnf install libusbx-devel
        echo "Then run ./configure --with-help again."
      else
        echo "Debian, Ubuntu: Copy from a 32 bit installation."
        echo "Mageia: urpmi libusb1.0-devel"
        echo "Very old Fedora: yum install libusb1-devel.i586"
        echo "Old Fedora: yum install libusb1-devel.i686"
        echo "Fedora: yum install libusbx-devel.i686"
        echo "Fedora b22: dnf install libusbx.i686 libusbx-devel.i686"
        echo "PCLinuxOS: apt-get install libusb1.0-devel.32bit"
        echo "SuSE: zypper install libusb-1_0-devel-32bit"
        echo "A symbolic link may be missing. Something like this:"
        echo "ln -s /usr/lib/libusb-1.0.${LIBEXT}.0.0.0 /usr/lib/libusb-1.0.${LIBEXT}"
        echo "Then run ./configure --with-help again."
      fi
      echo " "
    fi
  fi
# 32 bit -------------------- libusb ---------------------------------
  if test "$LIBUSB32_OK" = "0"; then
    echo "Not present: libusb.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "This package is no longer needed but it is an alternative"
      echo "for Si570 (Softrock, IQ+, Fifi SDR and others) and USB2LPT"
      echo "It is becoming obsolete and libusb-1.0 is a replacement."
      echo "If you do not have Si570 or USB2LPT, ignore this package"
      if test "$LIBUSB1_32_OK" = "1"; then
        echo "You already have libusb-1.0 so you can ignore libusb.${LIBEXT}"
      fi
      echo "To install old libusb, use one of these commands:"
      if test "$BITS" = "32"; then
        echo "Debian, Ubuntu: apt-get install libusb-dev"
        echo "old Fedora: yum install libusb-devel"
        echo  Fedora 22 and later: dnf install libusb-devel
        echo "Mageia: urpmi libusb-compat0.1-devel"
        echo "SuSE: zypper install libusb-compat-devel"
        echo "PCLinuxOS: apt-get install libusb-compat0.1-devel"
        echo "Then run ./configure --with-help again."
      else
        echo "Debian,Ubuntu: From source code or a 32 bit system."
        echo "Old Fedora: yum install libusb-devel.i586"
        echo "Fedora: yum install libusb-devel.i686"
        echo "Fedora 22: dnf install libusb.i686 libusb-devel.i686"
        echo "SuSE: zypper install libusb-0_1-4-32bit"
        echo "Mageia: urpmi libusb-compat0.1-devel"
        echo "Gentoo,Sabayon: Add symbolic links:"
        echo "PCLinuxOS: apt-get install libusb-compat0.1-devel.32bit"
        echo "Then run ./configure --with-help again."
      fi
      echo " "
    fi
  fi
# 32 bit --------------------- MIT SHM -------------------------------
  if test "$X11_32_ALL_OK" = "1"; then
    if test "$LIBXEXT32_OK" = "0"; then
      echo "Not present: libXext.${LIBEXT} $TXT32 (and/or missing headers)"
      if test "$HELP" = "1"; then
        echo "The MIT-SHM package allows faster graphics with X11"
        echo "If you want to compile for terminal mode with svgalib there is"
        echo "no need for it."
        if test "$LIBXEXT32_H" = "0"; then
          echo "Header file(s) missing: sys/ipc.h, X11/extensions/XShm.h or X11/Xfuncproto.h"
        fi
        if test "$BITS" = "32"; then
          echo "Debian, Ubuntu: apt-get install libxext-dev"
          echo "SuSE: zypper install xorg-x11-libXext-devel"
          echo "old Fedora: yum install libXext-devel"
          echo  Fedora 22 and later: dnf install libXext-devel
          echo "PCLinuxOS: apt-get install libxext-devel"
          echo "Mandriva: urpmi libxext6-devel"
          echo "Mageia: urpmi libxext-devel"
        else
          echo "Debian, Ubuntu: apt-get install ia32-libs-dev"
          echo "------: If ia32-libs-dev is missing install ia32-libs and add a symbolic link"
          echo "------: If that fails, copy from a 32 bit system"
          echo "Old Fedora: yum install libXext-devel.i586"
          echo "Fedora: yum install libXext-devel.i686"
          echo "Fedora 22: dnf install libXext.i686 libXext-devel.i686"
          echo "Mandriva: urpmi libxext6-devel"
          echo "Mageia: urpmi libxext-devel-1.3.2-3.mga4.i586 (change version)"
          echo "SuSE: zypper install xorg-x11-libXext-devel-32bit"
          echo "PCLinuxOS: apt-get install libxext-devel.32bit"
        fi
        echo "Some development packages may be incomplete."    
        echo "A symbolic link may help:"
        echo "ln -s ..../libXext.${LIBEXT}.6.4.0 ..../libXext.${LIBEXT}"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
  fi
# 32 bit -------------------svgalib---------------------------
  if test "$SVGALIB32_OK" = "0"; then
    echo "Not present: libvga.${LIBEXT} $TXT32  (and/or missing headers)"
    if test "$HELP" = "1"; then
      echo "svgalib is only needed for running Linrad in terminal mode."
      echo "If you want to compile for X11, there is no need to install it."
      echo "Read at www.sm5bsz.com/linuxdsp/install/svgainst.htm for info"
      echo "about installing svgalib from source code. The versions supplied"
      echo "by the distributions may support very old videocards only."
      echo "Obsolete svgalib versions can be used in linrad to provide a mouse"
      echo "to use with the framebuffer device. Compile flinrad on marginal"
      echo "platforms to avoid the X11 overhead. (Requires svgalib.)"
      if test "$SVGALIB32_H" = "0"; then
        echo "Header file vga.h vgagl.h or vgamouse.h missing or misplaced"
        echo "or libx86.so.1 missing"
      fi
      if test "$BITS" = "32"; then
        echo "Debian, Ubuntu: apt-get install libsvga1-dev"
        echo "SuSE: Install from source."
        echo "Mandriva: urpmi libsvgalib1-devel"
        echo "Mageia: urpmi libsvgalib-devel"
        echo "PCLinuxOS: apt-get install libsvgalib1-devel"
        echo "old Fedora: yum install svgalib-devel"
        echo  Fedora 22 and later: dnf install svgalib-devel
        echo "Sabayon, Gentoo: emerge svgalib"
        echo "You can install from source like this:"
        echo "   cd /usr/src"
        echo "   wget http://www.sm5bsz.com/linuxdsp/archive/svgalib/svga1925-3bsz.tbz"
        echo "   tar xvfj svga1925-3bsz.tbz"
        echo "   cd svgalib-1.9.25-3bsz"
        echo "   make install"
        echo "(.../utils may fail but that does not matter)"
      else
        echo "Copy from a 32 bit installation if the package is missing."
        echo "Files: libvga.so libvgagl.so vga.h vgagl.h vgamouse.h libx86.so.1"
        echo "Old Fedora: yum install svgalib-devel.i586"
        echo "Fedora: yum install svgalib-devel.i686"
        echo "Fedora 22: dnf install svgalib svgalib-devel.i686"
        echo "Debian, Ubuntu: apt-get install libsvga1-dev"
        echo "PCLinuxOS: apt-get install libsvgalib1-devel.32bit" 
        echo "--------------: (64 libraries, some contain 32 bit also)"
        echo "--------------: Add symbolic links in /usr/lib32"
        echo "--------------: (libvga.so and libvgagl.so missing.)"
        echo "Mageia: urpmi libsvgalib-devel-1.9.25-10.mga4.i586 (change version)"
      fi
      echo "Symbolic links may be needed due to incomplete development packages."
      echo "ln -s ..../libvga.${LIBEXT}.1.9.25 ..../libvga.${LIBEXT}"
      echo "ln -s ..../libvgagl.${LIBEXT}.1.9.25 ..../libvgagl.${LIBEXT}"
      echo "Then run ./configure --with-help again."
      echo " "
    fi   
  fi
# 32 bit --------------------------X11-----------------------------
  if test "$X11_32_ALL_OK" = "0"; then
    echo "Not present: libX11.${LIBEXT} $TXT32 (and/or missing headers)"
    if test "$HELP" = "1"; then
      echo "The X11 package is only needed for running Linrad with X11"
      echo "If you want to compile for terminal mode with svgalib there is"
      echo "no need for it."
      if test "$X11_32_OK" = "1"; then
        echo "Header file X11/Xlib.h missing."
      fi
      if test "$BITS" = "32"; then
        echo "Debian, Ubuntu: apt-get install libx11-dev"
        echo "Mandriva: urpmi libx11_6-devel"
        echo "Mageia: urpmi libx11-devel"
        echo "SuSE: zypper install xorg-x11-libX11-devel"
        echo "old Fedora: yum install libX11-devel"
        echo  Fedora 22 and later: dnf install libX11-devel
        echo "PCLinuxOS: apt-get install libx11-devel"
        echo "Mac OSX: Install XQuartz http://xquartz.macosforge.org/landing"
      else
        echo "Debian, Ubuntu: apt-get install ia32-libs-dev libc6-dev-i386"
        echo "--------: If ia32-libs-dev is missing, install ia32-libs and add a symbolic link:"
        echo "--------: ln -s /usr/lib/i386-linux-gnu/libX11.so.6.3.0 /usr/lib/i386-linux-gnu/libX11.so"
        echo "--------: Copy libX11.so from a 32 bit installation if ia32-libs fails."
        echo "--------: Use ldd to find what more 32 bit libraries to copy."
        echo "SuSE: zypper install xorg-x11-libX11-devel-32bit"
        echo "Old Fedora: yum install libX11-devel.i586"
        echo "Fedora: yum install libX11-devel.i686"
        echo "Fedora 22: dnf install libX11.i686 libX11-devel.i686"
        echo "Mageia: urpmi libx11-devel-1.6.2-2.mga4.i586  (change version number)"
        echo "Mandriva: urpmi libx11_6-devel"
        echo "PCLinuxOS: apt-get install libx11-devel.32bit" 
        echo "--------: Note that bugs currently make this install impossible"
        echo "--------: so install lib64x11_6-devel instead (summer 2010)."
        echo "--------: and make a symbolic link:"
        echo "--------: ln -s /usr/lib/libX11.${LIBEXT}.6.2.0 /usr/lib/libX11.${LIBEXT}"
      fi
      echo "Then run ./configure --with-help again."
      echo " "
    fi
  fi
# 32 bit ------------------ ALSA ---------------------------------
  if test "$ALSA32_OK" = "0"; then
    echo "Not present: libasound.${LIBEXT} $TXT32"
    if test "$HELP" = "1"; then
      echo "Install the ALSA package like this:" 
      if test "$BITS" = "64"; then
        echo "Old Debian, Ubuntu: apt-get install libasound2-dev lib32asound2"
        echo "New Debian, Ubuntu: apt-get install lib32asound2-dev"
        echo "Mandriva: urpmi libalsa-oss-devel"
        echo "Mageia: urpmi libalsa2-devel"
        echo "SuSE: zypper install alsa-devel-32bit"
        echo "PCLinuxOS: apt-get install libalsa-oss-devel.32bit"
        echo "old Fedora: yum install alsa-lib-devel.i686"  
        echo "Fedora 22 and later: dnf install alsa-lib-devel.i686"  
        echo "A symbolic link may be needed on 64 bit systems."
        echo "The development package might not include the 32 bit .${LIBEXT}"
        echo "ln -s ..../libasound.${LIBEXT}.2.0.0 ..../libasound.${LIBEXT}"
      else
        echo "Debian, Ubuntu: apt-get install libasound2-dev"
        echo "old Fedora: yum install alsa-lib-devel"  
        echo "Fedora 22 and later: dnf install alsa-lib.i686 alsa-lib-devel.i686"
        echo "Mandriva,Mageia: urpmi libalsa-oss-devel"
        echo "PClinuxOS: apt-get install libalsa-oss-devel"
        echo "SuSE: zypper install alsa-devel"
      fi
      echo "Then run ./configure --with-help again."
      echo " "
    fi
  fi
fi
#||||||||||||||||||||||||| 64 bit compilation ||||||||||||||||||||||||||||||||
if test "$BITS" = "64"; then
    if test "$ELF64" = ""; then
      echo "Your nasm compiler can not generate 64 bit code."
      echo "To compile for 64 bit code you must install a more recent version"
    else
# 64 bit ------------------------- Portaudio -----------------------
    if test "$PORTAUDIO64_OK" = "0"; then
      echo "Not present: libportaudio.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "Portaudio may have to be installed from source code."
        if test ${OS} != "Darwin"; then
          echo "The purpose of installing Portaudio is to be able to use Jack."
        fi
        echo "The versions included in the distributions do not always support Jack"
        echo "Make sure to remove any old non-working version first."
        echo "Install Portaudio from source like this:"
        if test "$HAVE_WGET" = ""; then
          install_wget
        else 
          echo "(Note that you may have to change the date 20140130 to something else.)"
          echo "   cd /usr/src"
          echo "   rm -f pa_stable_v19_20140130.tgz"
          echo "   wget http://portaudio.com/archives/pa_stable_v19_20140130.tgz"
          echo "   tar xvfz pa_stable_v19_20140130.tgz"
          echo "   cd portaudio"
          echo "   ./configure" 
          echo "   make"
          echo "   make install"
          echo "Then run ./configure --with-help again."
          echo " "
        fi
        echo "To install the distribution version use one of these commands"
        echo "old Fedora: yum install portaudio-devel"
        echo "Fedora 22 and later: dnf install portaudio-devel"
        echo "Debian, Ubuntu: apt-get install libportaudio-dev"
        echo "Debian 8: ln -s /usr/lib/x86_64-linux-gnu/libportaudio.so.2.0.0 /usr/lib/x86_64-linux-gnu/libportaudio.so" 
        echo "SuSE: zypper install portaudio-devel"
        echo "Gentoo,Sabayon: emerge portaudio"
        echo "Mageia: urpmi libportaudio-devel"
        echo "PCLinuxOS: apt-get install lib64portaudio2-devel"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
# 64 bit ------------------ Soft66 ------------------------------------
    if test "$SOFT66_64_OK" = "0"; then
      echo "Not present: libsoft66.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed for the Soft66 series receivers"
        if test "$LIBFTDI64_OK" = "0"; then
          echo "Install libftdi before libsoft66"
        else
          echo "Install from source code (http://www.infowares.com/soft66)"
          echo "Here are the instructions (run as root or with sudo)"
          if test "$HAVE_WGET" = ""; then
            install_wget
          else  
            if test "$HAVE_PKG_CONFIG" = ""; then
              echo First install pkg-config like this:
              echo Fedora: yum install pkg-config
              echo Debian, Ubuntu: apt-get install pkg-config
              echo PCLinuxOS: apt-get install pkg-config
              echo SuSE: zypper install pkg-config
              echo Then run ./configure --with-help again.
            else 
              install_soft66
            fi
          fi
        fi
        echo " "
      fi
    fi
# 64 bit ------------------ Libftdi ------------------------------------
    if test "$LIBFTDI64_OK" = "0"; then
      echo "Not present: libftdi.so (needed for Soft66 or Elektor)"
      if test "$HELP" = "1"; then
        echo "Debian,Ubuntu: apt-get install libftdi-dev"
        echo "Mandriva, Mageia: urpmi libftdi-devel (ftdi.h may be misplaced)"
        echo "----------------: cp /usr/include/libftdi/ftdi.h /usr/include"
        echo "PCLinuxOS: apt-get install libftdi-devel"
        echo "old Fedora: yum install libftdi-devel"
        echo "Fedora 22 and later: dnf install libftdi-devel"
        echo "SuSE: zypper install libftdi1-devel"
        echo "Gentoo,Sabayon: emerge libftdi"
        echo "Mageia: urpmi libftdi-devel"
        echo "Then run ./configure --with-help again."
        echo " "
        echo "Can be installed from source instead."
        if test "$HAVE_WGET" = ""; then
          install_wget
        else 
          echo "   cd /usr/src"
          echo "   rm -f libftdi-0.18.tar.gz"
          echo "   wget http://www.sm5bsz.com/linuxdsp/archive/libftdi-0.18.tar.gz"
          echo "   tar xvfz libftdi-0.18.tar.gz"
          echo "   cd libftdi-0.18"
          echo "   ./configure"
          echo "   make"
          echo "   make install"
          echo "Then run ./configure --with-help again."
          echo " "
        fi
      fi
    fi
# 64 bit ----------------- RTL 2832 Dongles --------------------------
    if test "$LIBRTLSDR64_OK" = "0"; then
      echo "Not present: librtlsdr.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed for the Realtek RTL2832 based DVB dongle"      
        if test "$LIBUSB1_64_OK" = "0"; then
          echo "Install libusb-1.0 before librtlsdr."
        else
          echo "You may install the standard osmocom package from source"
          echo "http://sdr.osmocom.org/trac/wiki/rtl-sdr"
          echo "To get the improved library for Linrad use the following commands:"
          if test "$HAVE_WGET" = ""; then
            install_wget
          else
            if test "$HAVE_CMAKE" = ""; then
              install_cmake
            else
              echo "   cd /usr/src"
              echo "   rm -r -f librtlsdr"
              echo "   wget http://sm5bsz.com/linuxdsp/hware/rtlsdr/rtl-sdr-linrad5.tbz"
              echo "   tar xvfj rtl-sdr-linrad5.tbz"
              echo "   cd librtlsdr"
              echo "   mkdir build"
              echo "   cd build"
              echo "   cmake .."
              echo "   make"
              echo "   make install"
              echo "Then run ./configure --with-help again."
            fi
          fi
        fi  
        echo " "
      fi
    fi
# 64 bit ------------------ Libudev ------------------------------------
    if test "$LIBUDEV_64_OK" = "0"; then
      echo "Not present: libudev.${LIBEXT} (64bit) (Funcube ProPlus, Afedri USB)"
      if test "$HELP" = "1"; then
        echo "Debian, Ubuntu: apt-get install libudev-dev"
        echo "Mandriva: urpmi libudev-devel (udev.h misplaced)"
        echo "PCLinuxOS: apt-get install lib64udev0-devel"
        echo "vy old Fedora: yum install systemd-devel"
        echo "vy old Fedora: ln -s /usr/lib64/libudev.so.1.2.1 /usr/lib64/libudev.so"
        echo "old Fedora: yum install libudev-devel"
        echo "Fedora 22 and later: dnf install systemd-devel"
        echo "SuSE: zypper install libudev-devel"
        echo "Mageia: urpmi lib64udev-devel"
        echo "Then run ./configure --with-help again."
        echo "Udev is believed to be part of most Linux distributions"
        echo " "
      fi
    fi
# 64 bit ------------------ Libwd_dask ------------------------------------
    if test "$LIBWD_DASK_64_OK" = "0"; then
      echo "Not present: libwd_dask64.${LIBEXT} (64bit) Neded for PCIe-9842"
      if test "$HELP" = "1"; then
        echo "Get it from the ADLINK Internet site"
        echo "www.adlinktech.com"
        echo "Register with your email account. Go to:"
        echo "Products > PXI & Modular Instruments >"
        echo "Digitizers/Oscilloscopes > Drivers"
        echo "Unpack the wd-dask .tgz archive and copy the libwd_dask.${LIBEXT}"
        echo "file to a suitable location." 
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
# 64 bit ----------------- bladeRF --------------------------
    if test "$LIBBLADERF64_OK" = "0"; then
      echo "Not present: libbladeRF.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed for the nuand.com bladeRF"      
        if test "$HAVE_CPP" = ""; then
          install_cpp
        else
          if test "$HAVE_CMAKE" = ""; then
            install_cmake
          else
            if test "$HAVE_GIT" = ""; then
              install_git
            else
              if test "$LIBUSB1_64_OK" = "0"; then
                echo "Install libusb-1.0 before libbladeRF."
              else
                if test "$HAVE_PKG_CONFIG" = ""; then
                  echo First install pkg-config like this:
                  echo Fedora: yum install pkg-config
                  echo Debian, Ubuntu: apt-get install pkg-config
                  echo PCLinuxOS: apt-get install pkg-config
                  echo SuSE: zypper install pkg-config
                  echo "Then run ./configure --with-help again."
                else
                  echo "Dependencies are described here:"
                  echo "https://github.com/Nuand/bladeRF/wiki"
                  echo "Install the library like this:"
                  echo "   cd /usr/src/"
                  echo "   git clone https://github.com/Nuand/bladeRF.git"
                  echo "   cd bladeRF/host"
                  echo "   mkdir build"
                  echo "   cd build"
                  echo "   cmake -DINSTALL_UDEV_RULES=ON ../"
                  echo "   make"
                  echo "   make install"
                  echo "Then run ./configure --with-help again."
                fi
              fi
            fi
          fi
        fi
        echo " "
      fi
    fi
# 64 bit ----------------- OpenCL and clFFT --------------------------
    if test "$LIBOPENCL64_OK" = "0"; then
      echo "Not present: libOpenCL.${LIBEXT} (64 bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed to use the graphics card for fast FFT"      
        echo "Debian, Ubuntu: apt-get install amd-opencl-dev"
        echo "----: Note that non-free has to be specified in /etc/apt/sources.list"
        echo "Fedora 22: dnf install dnf install ocl-icd-devel opencl-utils-devel"
        echo "Mageia: urpmi lib64opencl1 lib64opencl-devel"
        echo Then run ./configure --with-help again.
        echo " "
      fi
    else
      if test "$CLFFTINC" == ""; then
        echo "Not present: clFFT.h"
        if test "$HELP" = "1"; then
          echo "This file is needed for fast FFT on the graphics card."
          echo "You need the files in the subdirectory extlibs of Linrad."
          echo "If you do not want the latest from the repo, Install like this:"
          echo "  svn checkout https://svn.code.sf.net/p/linrad/code/trunk linrad-latest"
          echo "  mkdir extlibs"
          echo "  cp -r linrad-latest/extlibs/* extlibs"
          echo "Then run ./configure --with-help again."
          echo " "
        fi
      else 
        if test "$CLFFTPATH64" == ""; then
          echo "Not present: clFFT.a"
          if test "$HELP" = "1"; then
            echo "This file is needed for fast FFT on the graphics card."
            if test "$HAVE_CPP" = ""; then
              install_cpp
            else
              if test "$HAVE_CMAKE" = ""; then
                install_cmake
              else
                echo "Install like this:"
                echo "if bits/c++config.h is missing install gcc-multilib"
                echo "and add symbolic links as required."
                echo "  cd extlibs/clFFT/src"
                echo "  mkdir build"
                echo "  cd build"
                echo "  cmake .."
                echo "  make clFFT"
                echo "  cd ../../../.."     
                echo "Then run ./configure --with-help again."
                echo " "
              fi 
            fi
          fi
        fi
      fi
    fi
# 64 bit ----------------- Mirics USB dongles --------------------------
    if test "$LIBMIRISDR64_OK" = "0"; then
      echo "Not present: libmirisdr.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed for the Mirics USB dongles"      
        if test "$HAVE_CMAKE" = ""; then
          install_cmake
        else
          if test "$HAVE_WGET" = ""; then
            install_wget
          else
            echo "Install the library like this:"
            echo "   cd /usr/src/"
            echo "   wget http://sm5bsz.com/linuxdsp/archive/mingw/libmirisdr-2-bsz.tbz"
            echo "   tar xvfj libmirisdr-2-bsz.tbz"
            echo "   cd libmirisdr-2-bsz"
            echo "   mkdir build"
            echo "   cd build"
            echo "   cmake .."
            echo "   make"
            echo "   make install"
            echo "Then run ./configure --with-help again."
          fi
        fi
        echo " "
      fi
    fi
# 64 bit ----------------- Airspy --------------------------
    if test "$LIBAIRSPY64_OK" = "0"; then
      echo "Not present: libairspy.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed for Airspy."      
        if test "$HAVE_CPP" = ""; then
          install_cpp
        else
          if test "$HAVE_CMAKE" = ""; then
            install_cmake
          else
            if test "$HAVE_SUBVERSION" = ""; then
              install_subversion
            else
              echo "Install the library like this:"
              echo "   cd /usr/src/"
              echo "   svn checkout https://github.com/airspy/host libairspy"
              echo "   cd libairspy/trunk"
              echo "   mkdir build"
              echo "   cd build"
              echo "   cmake ../ -DINSTALL_UDEV_RULES=ON"
              echo "   make"
              echo "   make install"
              echo "Then run ./configure --with-help again."
            fi
          fi
        fi
        echo " "
      fi
    fi
# 64 bit ----------------- ELAD FDM-S1 --------------------------
    if test "$LIBFDMS1_64_OK" = "0"; then
      echo "Not present: libfdms1.${LIBEXT}.1.0 (64 bit)"
      if test "$HELP" = "1"; then
        echo "This package is needed for the ELAD FDM-S1 receiver"      
        if test "$HAVE_WGET" = ""; then
          install_wget
        else  
          if test "$HAVE_ALIEN" = ""; then
            install_alien
          else
            echo "Install the libfdms1 library like this:"
            echo "(copy and paste into the command line)"
            echo "  cd /usr/src"
            echo "  mkdir libfdms1"
            echo "  cd libfdms1"
            echo "  wget http://sdr.eladit.com/FDM-S1%20Sampler/Linux/libfdms1-64bit-1.0.1-2.x86_64.rpm ."
            echo "  alien --scripts --to-tgz libfdms1-64bit-1.0.1-2.x86_64.rpm"
            echo "  tar xvfz libfdms1-64bit-1.0.1.tgz"
            echo "  mkdir /usr/lib/x86_64-linux-gnu"
            echo "  cp usr/lib/x86_64-linux-gnu/* /usr/lib/x86_64-linux-gnu"
            echo "Then run ./configure --with-help again."
          fi  
          echo " "
        fi
      fi
    fi
# 64 bit -------------------- Perseus  -------------------------------
    if test "$PERSEUS64_OK" = "0"; then
      echo "Not present: libperseus-sdr.${LIBEXT} (64 bit)"
      if test "$HELP" = "1"; then
        if test "$LIBUSB1_64_OK" = "0"; then
          echo "Install libusb-1.0 before libperseus-sdr.${LIBEXT}"
        else
          echo "Only for the Perseus HF receiver. Install from source!"
          echo "Here are the instructions (run as root or with sudo)"
          if test "$HAVE_GIT" = ""; then
            install_git
          else 
            if test "$HAVE_AUTOMAKE" = ""; then
              install_automake
            else
              if test "$HAVE_LIBTOOL" = ""; then
                install_libtool
              else
                if test "$HAVE_XXD" = ""; then
                  install_xxd
                else 
                  echo "   cd /usr/src"
                  echo "   rm -r libperseus-sdr"
                  echo "   git clone https://github.com/amontefusco/libperseus-sdr"
                  echo "   cd libperseus-sdr"
                  echo "   libtoolize"
                  echo "   autoconf"
                  echo "   autoreconf -i"
                  echo "   ./configure"
                  echo "   make"
                  echo "   make install"
                  echo "Then run ./configure --with-help again."
                  echo "Note that you need root privileges."
                fi
              fi
            fi
          fi
        fi
        echo " "
      fi
    fi
# 64 bit ---------------- libusb-1.0 ------------------------
    if test "$LIBUSB1_64_OK" = "0"; then
      echo "Not present: libusb-1.0.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "Needed for most USB hardware."
        echo "To install, use one of these commands:"
        echo "Debian, Ubuntu: apt-get install libusb-1.0-0-dev"
        echo "Old Fedora: yum install libusb1-devel"
        echo "New Fedora: yum install libusbx-devel"
        echo "Mageia: urpmi lib64usb1.0-devel"
        echo "SuSE: zypper install libusb-1_0-devel"
        echo "PCLinuxOS: apt-get install lib64usb1.0-devel"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
# 64 bit -------------------- libusb ---------------------------------
    if test "$LIBUSB64_OK" = "0"; then
      echo "Not present: libusb.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This package is no longer needed but it is an alternative."
        echo "for the Si570 (Softrock, IQ+, Fifi SDR and others) and USB2LPT"
        echo "It is becoming obsolete and libusb-1.0 is a replacement."
        echo "If you do not have Si570 or USB2LPT, ignore this package"
        if test "$LIBUSB1_64_OK" = "1"; then
          echo "You already have libusb-1.0 so you can ignore libusb.${LIBEXT}"
        fi
        echo "To install old libusb, use one of these commands:"
        echo "Debian,Ubuntu: apt-get install libusb-dev"
        echo "old Fedora: yum install libusb-devel"
        echo "Fedora 22 and later: dnf install libusb-devel"
        echo "SuSE: zypper install libusb-compat-devel"
        echo "Mageia: urpmi lib64usb-compat0.1-devel"
        echo "PCLinuxOS: apt-get install lib64usb-compat0.1-devel"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
# 64 bit --------------------- MIT SHM -------------------------------
    if test "$X11_64_ALL_OK" = "1"; then
      if test "$LIBXEXT64_OK" = "0"; then
        echo "Not present: libXext.${LIBEXT} (64bit) (and/or missing headers)"
        if test "$HELP" = "1"; then
          echo "The MIT-SHM package allows faster graphics with X11"
          echo "If you want to compile for terminal mode with svgalib there is"
          echo "no need for it."
          if test "$LIBXEXT64_H" = "0"; then
            echo "Header file(s) missing: sys/ipc.h, X11/extensions/XShm.h or X11/Xfuncproto.h"
          fi
          echo "Debian, Ubuntu: apt-get install libxext-dev"
          echo "old Fedora: yum install libXext-devel"
          echo "Fedora 22 and later: dnf install libXext-devel"
          echo "Mandriva: urpmi lib64xext6-devel"
          echo "Mageia: urpmi lib64xext-devel"
          echo "PCLinuxOS: apt-get install lib64xext-devel"
          echo "old SuSE: zypper install xorg-x11-libXext-devel"
          echo "new SuSE: zypper install libXext-devel"
          echo "Some development packages may be incomplete."    
          echo "A symbolic link may help:"
          echo "ln -s ..../libXext.${LIBEXT}.6.4.0 ..../libXext.${LIBEXT}"
          echo "Then run ./configure --with-help again."
          echo " "
        fi
      fi
    fi
# 64 bit -------------------svgalib---------------------------
    if test "$SVGALIB64_OK" = "0"; then
      echo "Not present: libvga.${LIBEXT} (64bit)  (and/or missing headers)"
      if test "$HELP" = "1"; then
        if test "$SVGALIB64_H" = "0"; then
          echo "Header file vga.h vgagl.h or vgamouse.h missing or misplaced"
          echo "or libx86.so.1 missing"
        fi
        echo "svgalib is only needed for running Linrad in terminal mode."
        echo "If you want to compile for X11, there is no need to install it."
        echo "Read at www.sm5bsz.com/linuxdsp/install/svgainst.htm for info"
        echo "about installing svgalib from source code. The versions supplied"
        echo "by the distributions may support very old videocards only."
        echo "Obsolete svgalib versions can be used in linrad to provide a mouse"
        echo "to use with the framebuffer device. Compile flinrad on marginal"
        echo "platforms to avoid the X11 overhead. (Requires svgalib.)"
        echo "Debian, Ubuntu: apt-get install libsvga1-dev"
        echo "old Fedora: yum install svgalib-devel"
        echo "Fedora 22 and later: dnf install svgalib-devel"
        echo "Mageia: urpmi lib64svgalib-devel"
        echo "PCLinuxOS: apt-get install lib64svgalib1-devel"
        echo "Mandriva: urpmi lib64svgalib1-devel"
        echo "Then run ./configure --with-help again."
        echo " "
        echo "You can install from source like this:"
        echo "   cd /usr/src"
        echo "   wget http://www.sm5bsz.com/linuxdsp/archive/svgalib/svga1925-3bsz.tbz"
        echo "   tar xvfj svga1925-3bsz.tbz"
        echo "   cd svgalib-1.9.25-3bsz"
        echo "   make install"
        echo "(..../utils may fail but that does not matter)"
        echo "Then run ./configure --with-help again."
        echo " "
      fi   
    fi
# 64 bit --------------------------X11-----------------------------
    if test "$X11_64_ALL_OK" = "0"; then
      echo "Not present: libX11.${LIBEXT} (64bit) (and/or missing headers)"
      if test "$HELP" = "1"; then
        echo "The X11 package is only needed for running Linrad with X11"
        echo "If you want to compile for terminal mode with svgalib there is"
        echo "no need for it."
        if test "$X11_64_OK" = "1"; then
          echo "Header file X11/Xlib.h missing (or mis-placed)."
        fi
        echo "Debian, Ubuntu: apt-get install libx11-dev"
        echo "Mandriva: urpmi lib64x11_6-devel"
        echo "Mageia: urpmi lib64x11-devel"
        echo "SuSE: zypper install xorg-x11-libX11-devel"
        echo "old Fedora: yum install libX11-devel"
        echo "Fedora 22 and later: dnf install libX11-devel"
        echo "PCLinuxOS: apt-get install lib64x11-devel"
        echo "Mac OSX: Install XQuartz http://xquartz.macosforge.org/landing"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
# 64 bit ------------------ ALSA ---------------------------------
    if test "$ALSA64_OK" = "0"; then
      echo "Not present: libasound.${LIBEXT} (64bit)"
      if test "$HELP" = "1"; then
        echo "This is the library for the ALSA sound system."
        echo "Install the ALSA package like this:" 
        echo "Debian, Ubuntu: apt-get install libasound2-dev"
        echo "old Fedora: yum install alsa-lib-devel"
        echo "Fedora 22 and later: dnf install alsa-lib-devel"
        echo "Mandriva, Mageia: urpmi lib64alsa-oss-devel"
        echo "SuSE: zypper install alsa-devel"
        echo "PCLinuxOS: apt-get install lib64alsa-oss-devel"
        echo "Then run ./configure --with-help again."
        echo " "
      fi
    fi
  fi 
fi
#------------------------------------------------------------------
if test ${OS} = "Darwin"; then
  echo "Use MacPorts to install Linux packages under Mac OS X."
fi
echo " "
SOUND32_OK="1"
if test "$OSS32_H" = "0"; then
  if test "$ALSA32_OK" = "0"; then
    if test "$PORTAUDIO32_OK" = "0"; then
      SOUND32_OK="0"
    fi
  fi
fi
SOUND64_OK="1"
if test "$OSS64_H" = "0"; then
  if test "$ALSA64_OK" = "0"; then
    if test "$PORTAUDIO64_OK" = "0"; then
      SOUND64_OK="0"
    fi
  fi
fi
SCREEN_AND_SOUND="1"
if test $ANYTHING_OK = "1"; then
  if test "$SOUND32_OK" = "0"; then
    if test "$BITS" = "64"; then
      if test "$SOUND64_OK" = "0"; then
        echo "There is no sound system (and/or header files are missing)." 
        SCREEN_AND_SOUND="0"
      else
        if test "$SCREEN64_OK" = "0"; then
          echo "There is no 32 bit sound system (and/or header files are missing.)" 
          echo "The existing 64 bit sound system can not be used because there"
          echo "is no 64 bit screen."
          echo "Install 64 bit libX11.${LIBEXT} or libvga.${LIBEXT}"
          echo "or install 32 bit libportaudio .${LIBEXT} or libasound.${LIBEXT}"
          echo "Alternatively, install the 32 bit version of 4Front OSS"
          SCREEN_AND_SOUND="0"
        fi
      fi
    else
      echo "There is no sound system (and/or header files are missing)." 
      SCREEN_AND_SOUND="0"
    fi
  else
    if test "$SCREEN32_OK" = "0"; then
      if test "$BITS" = "64"; then
        if test "$SOUND64_OK" = "0"; then
          echo "There is no 64 bit sound system (and/or header files are missing.)" 
          echo "The existing 32 bit sound system can not be used because there"
          echo "is no 32 bit screen."
          echo "Install 32 bit libX11.${LIBEXT} or libvga.${LIBEXT}"
          echo "or install 64 bit libportaudio .${LIBEXT} or libasound.${LIBEXT}"
          echo "Alternatively, install the 64 bit version of 4Front OSS"
          SCREEN_AND_SOUND="0"
        fi
      else
        echo "There is sound, but no screen."
        echo "Install 32 bit libX11.${LIBEXT} or libvga.${LIBEXT}"
        echo "or install libportaudio .${LIBEXT} or libasound.${LIBEXT}"
      fi 
    fi
  fi
  if test "$SCREEN_AND_SOUND" = "0"; then
    echo " "
    echo "Soundcards can not be used."
    echo "Input from Perseus, SDR-14 and other SDR hardwares is possible" 
    echo "The output can be sent to network or a disk file."
    echo " "
  fi
  if test ${OS} = "Linux"; then
    echo "Normal End. You can now run make"
    echo "(Run make without argument for info.)"
  else
    if test ${OS} = "Darwin"; then
      echo "Normal End. You can now run make"
      echo "(Run make without argument for info.)"
    else
      echo "Normal End. You can now run gmake"
      echo "(Run gmake without argument for info.)"
    fi
  fi
  echo "To generate servers (daemons) run configure --with-server"
else
  echo "To compile for Linux you need either libX11.${LIBEXT} or libvga.${LIBEXT}"
  if test $BITS = "64"; then
    echo "Neither the 32 bit nor the 64 bit version of either one is present."
  fi
  echo "Can also not compile for Windows due to missing mingw or libraries."
  echo " "
  echo "Not enough packages on this system to compile anything."
  echo "Type this command:   ./configure --with-help"
fi

rm -f verify_oss
rm -f verify_svgalib
rm -f verify_x11
rm -f verify_xext
rm -f verify_xkblib
rm -f a.out
rm -f *~
rm -f xlinrad
rm -f linrad
rm -f flinrad
rm -f linrad.exe
rm -f xlinrad64
rm -f linrad64
rm -f flinrad64
rm -f linrad64.exe
rm -f *.o
rm -f *.ol
rm -f *.ow
rm -f *.om
rm -f *.oy

#echo OSS32_H = $OSS32_H
#echo ALSA32_LD = $ALSA32_LD
#echo PORTAUDIO32_OK = $PORTAUDIO32_OK
#echo PORTAUDIO32_LD = $PORTAUDIO32_LD
#echo LIBUSB32_OK = $LIBUSB32_OK

#echo OSS64_H = $OSS64_H
#echo ALSA64_LD = $ALSA64_LD
#echo PORTAUDIO64_OK = $PORTAUDIO64_OK
#echo PORTAUDIO64_LD = $PORTAUDIO64_LD
#echo LIBUSB64_OK = $LIBUSB64_OK

#echo SCREEN_AND_SOUND = $SCREEN_AND_SOUND
#echo ANYTHING_OK = $ANYTHING_OK 
#echo SOUND32_OK = $SOUND32_OK
#echo SCREEN32_OK = $SCREEN32_OK
#echo X11_32_H = $X11_32_H
#echo X11_32_INC = $X11_32_INC
#echo SOUND64_OK = $SOUND64_OK
#echo LIBUDEV_32_OK = $LIBUDEV_32_OK
#echo SCREEN64_OK = $SCREEN64_OK
#echo X11_64_H = $X11_64_H
#echo X11_64_INC = $X11_64_INC
#echo X11_64_ALL_OK = $X11_64_ALL_OK
#echo X11_64_OK = $X11_64_OK
#echo X11_64_LD = $X11_64_LD
#echo LIBUDEV_64_OK = $LIBUDEV_64_OK
#echo LIBWD_DASK_32_OK = $LIBWD_DASK_32_OK
#echo LIBBLADERF64_OK = $LIBBLADERF64_OK
#echo CLFFTINC = $CLFFTINC
#echo OCLPROGS64 = $OCLPROGS64
#echo LIBOPENCL64_OK = $LIBOPENCL64_OK
#echo CLFFTPATH64 =  $CLFFTPATH64
#echo LIBOPENCL64_LD = $LIBOPENCL64_LD
#echo LIBMIRISDR64_LD = $LIBMIRISDR64_LD
#echo LIBMIRISDR64_OK = $LIBMIRISDR64_OK

